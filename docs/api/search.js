window.pdocSearch = (function(){
/** elasticlunr - http://weixsong.github.io * Copyright (C) 2017 Oliver Nightingale * Copyright (C) 2017 Wei Song * MIT Licensed */!function(){function e(e){if(null===e||"object"!=typeof e)return e;var t=e.constructor();for(var n in e)e.hasOwnProperty(n)&&(t[n]=e[n]);return t}var t=function(e){var n=new t.Index;return n.pipeline.add(t.trimmer,t.stopWordFilter,t.stemmer),e&&e.call(n,n),n};t.version="0.9.5",lunr=t,t.utils={},t.utils.warn=function(e){return function(t){e.console&&console.warn&&console.warn(t)}}(this),t.utils.toString=function(e){return void 0===e||null===e?"":e.toString()},t.EventEmitter=function(){this.events={}},t.EventEmitter.prototype.addListener=function(){var e=Array.prototype.slice.call(arguments),t=e.pop(),n=e;if("function"!=typeof t)throw new TypeError("last argument must be a function");n.forEach(function(e){this.hasHandler(e)||(this.events[e]=[]),this.events[e].push(t)},this)},t.EventEmitter.prototype.removeListener=function(e,t){if(this.hasHandler(e)){var n=this.events[e].indexOf(t);-1!==n&&(this.events[e].splice(n,1),0==this.events[e].length&&delete this.events[e])}},t.EventEmitter.prototype.emit=function(e){if(this.hasHandler(e)){var t=Array.prototype.slice.call(arguments,1);this.events[e].forEach(function(e){e.apply(void 0,t)},this)}},t.EventEmitter.prototype.hasHandler=function(e){return e in this.events},t.tokenizer=function(e){if(!arguments.length||null===e||void 0===e)return[];if(Array.isArray(e)){var n=e.filter(function(e){return null===e||void 0===e?!1:!0});n=n.map(function(e){return t.utils.toString(e).toLowerCase()});var i=[];return n.forEach(function(e){var n=e.split(t.tokenizer.seperator);i=i.concat(n)},this),i}return e.toString().trim().toLowerCase().split(t.tokenizer.seperator)},t.tokenizer.defaultSeperator=/[\s\-]+/,t.tokenizer.seperator=t.tokenizer.defaultSeperator,t.tokenizer.setSeperator=function(e){null!==e&&void 0!==e&&"object"==typeof e&&(t.tokenizer.seperator=e)},t.tokenizer.resetSeperator=function(){t.tokenizer.seperator=t.tokenizer.defaultSeperator},t.tokenizer.getSeperator=function(){return t.tokenizer.seperator},t.Pipeline=function(){this._queue=[]},t.Pipeline.registeredFunctions={},t.Pipeline.registerFunction=function(e,n){n in t.Pipeline.registeredFunctions&&t.utils.warn("Overwriting existing registered function: "+n),e.label=n,t.Pipeline.registeredFunctions[n]=e},t.Pipeline.getRegisteredFunction=function(e){return e in t.Pipeline.registeredFunctions!=!0?null:t.Pipeline.registeredFunctions[e]},t.Pipeline.warnIfFunctionNotRegistered=function(e){var n=e.label&&e.label in this.registeredFunctions;n||t.utils.warn("Function is not registered with pipeline. This may cause problems when serialising the index.\n",e)},t.Pipeline.load=function(e){var n=new t.Pipeline;return e.forEach(function(e){var i=t.Pipeline.getRegisteredFunction(e);if(!i)throw new Error("Cannot load un-registered function: "+e);n.add(i)}),n},t.Pipeline.prototype.add=function(){var e=Array.prototype.slice.call(arguments);e.forEach(function(e){t.Pipeline.warnIfFunctionNotRegistered(e),this._queue.push(e)},this)},t.Pipeline.prototype.after=function(e,n){t.Pipeline.warnIfFunctionNotRegistered(n);var i=this._queue.indexOf(e);if(-1===i)throw new Error("Cannot find existingFn");this._queue.splice(i+1,0,n)},t.Pipeline.prototype.before=function(e,n){t.Pipeline.warnIfFunctionNotRegistered(n);var i=this._queue.indexOf(e);if(-1===i)throw new Error("Cannot find existingFn");this._queue.splice(i,0,n)},t.Pipeline.prototype.remove=function(e){var t=this._queue.indexOf(e);-1!==t&&this._queue.splice(t,1)},t.Pipeline.prototype.run=function(e){for(var t=[],n=e.length,i=this._queue.length,o=0;n>o;o++){for(var r=e[o],s=0;i>s&&(r=this._queue[s](r,o,e),void 0!==r&&null!==r);s++);void 0!==r&&null!==r&&t.push(r)}return t},t.Pipeline.prototype.reset=function(){this._queue=[]},t.Pipeline.prototype.get=function(){return this._queue},t.Pipeline.prototype.toJSON=function(){return this._queue.map(function(e){return t.Pipeline.warnIfFunctionNotRegistered(e),e.label})},t.Index=function(){this._fields=[],this._ref="id",this.pipeline=new t.Pipeline,this.documentStore=new t.DocumentStore,this.index={},this.eventEmitter=new t.EventEmitter,this._idfCache={},this.on("add","remove","update",function(){this._idfCache={}}.bind(this))},t.Index.prototype.on=function(){var e=Array.prototype.slice.call(arguments);return this.eventEmitter.addListener.apply(this.eventEmitter,e)},t.Index.prototype.off=function(e,t){return this.eventEmitter.removeListener(e,t)},t.Index.load=function(e){e.version!==t.version&&t.utils.warn("version mismatch: current "+t.version+" importing "+e.version);var n=new this;n._fields=e.fields,n._ref=e.ref,n.documentStore=t.DocumentStore.load(e.documentStore),n.pipeline=t.Pipeline.load(e.pipeline),n.index={};for(var i in e.index)n.index[i]=t.InvertedIndex.load(e.index[i]);return n},t.Index.prototype.addField=function(e){return this._fields.push(e),this.index[e]=new t.InvertedIndex,this},t.Index.prototype.setRef=function(e){return this._ref=e,this},t.Index.prototype.saveDocument=function(e){return this.documentStore=new t.DocumentStore(e),this},t.Index.prototype.addDoc=function(e,n){if(e){var n=void 0===n?!0:n,i=e[this._ref];this.documentStore.addDoc(i,e),this._fields.forEach(function(n){var o=this.pipeline.run(t.tokenizer(e[n]));this.documentStore.addFieldLength(i,n,o.length);var r={};o.forEach(function(e){e in r?r[e]+=1:r[e]=1},this);for(var s in r){var u=r[s];u=Math.sqrt(u),this.index[n].addToken(s,{ref:i,tf:u})}},this),n&&this.eventEmitter.emit("add",e,this)}},t.Index.prototype.removeDocByRef=function(e){if(e&&this.documentStore.isDocStored()!==!1&&this.documentStore.hasDoc(e)){var t=this.documentStore.getDoc(e);this.removeDoc(t,!1)}},t.Index.prototype.removeDoc=function(e,n){if(e){var n=void 0===n?!0:n,i=e[this._ref];this.documentStore.hasDoc(i)&&(this.documentStore.removeDoc(i),this._fields.forEach(function(n){var o=this.pipeline.run(t.tokenizer(e[n]));o.forEach(function(e){this.index[n].removeToken(e,i)},this)},this),n&&this.eventEmitter.emit("remove",e,this))}},t.Index.prototype.updateDoc=function(e,t){var t=void 0===t?!0:t;this.removeDocByRef(e[this._ref],!1),this.addDoc(e,!1),t&&this.eventEmitter.emit("update",e,this)},t.Index.prototype.idf=function(e,t){var n="@"+t+"/"+e;if(Object.prototype.hasOwnProperty.call(this._idfCache,n))return this._idfCache[n];var i=this.index[t].getDocFreq(e),o=1+Math.log(this.documentStore.length/(i+1));return this._idfCache[n]=o,o},t.Index.prototype.getFields=function(){return this._fields.slice()},t.Index.prototype.search=function(e,n){if(!e)return[];e="string"==typeof e?{any:e}:JSON.parse(JSON.stringify(e));var i=null;null!=n&&(i=JSON.stringify(n));for(var o=new t.Configuration(i,this.getFields()).get(),r={},s=Object.keys(e),u=0;u<s.length;u++){var a=s[u];r[a]=this.pipeline.run(t.tokenizer(e[a]))}var l={};for(var c in o){var d=r[c]||r.any;if(d){var f=this.fieldSearch(d,c,o),h=o[c].boost;for(var p in f)f[p]=f[p]*h;for(var p in f)p in l?l[p]+=f[p]:l[p]=f[p]}}var v,g=[];for(var p in l)v={ref:p,score:l[p]},this.documentStore.hasDoc(p)&&(v.doc=this.documentStore.getDoc(p)),g.push(v);return g.sort(function(e,t){return t.score-e.score}),g},t.Index.prototype.fieldSearch=function(e,t,n){var i=n[t].bool,o=n[t].expand,r=n[t].boost,s=null,u={};return 0!==r?(e.forEach(function(e){var n=[e];1==o&&(n=this.index[t].expandToken(e));var r={};n.forEach(function(n){var o=this.index[t].getDocs(n),a=this.idf(n,t);if(s&&"AND"==i){var l={};for(var c in s)c in o&&(l[c]=o[c]);o=l}n==e&&this.fieldSearchStats(u,n,o);for(var c in o){var d=this.index[t].getTermFrequency(n,c),f=this.documentStore.getFieldLength(c,t),h=1;0!=f&&(h=1/Math.sqrt(f));var p=1;n!=e&&(p=.15*(1-(n.length-e.length)/n.length));var v=d*a*h*p;c in r?r[c]+=v:r[c]=v}},this),s=this.mergeScores(s,r,i)},this),s=this.coordNorm(s,u,e.length)):void 0},t.Index.prototype.mergeScores=function(e,t,n){if(!e)return t;if("AND"==n){var i={};for(var o in t)o in e&&(i[o]=e[o]+t[o]);return i}for(var o in t)o in e?e[o]+=t[o]:e[o]=t[o];return e},t.Index.prototype.fieldSearchStats=function(e,t,n){for(var i in n)i in e?e[i].push(t):e[i]=[t]},t.Index.prototype.coordNorm=function(e,t,n){for(var i in e)if(i in t){var o=t[i].length;e[i]=e[i]*o/n}return e},t.Index.prototype.toJSON=function(){var e={};return this._fields.forEach(function(t){e[t]=this.index[t].toJSON()},this),{version:t.version,fields:this._fields,ref:this._ref,documentStore:this.documentStore.toJSON(),index:e,pipeline:this.pipeline.toJSON()}},t.Index.prototype.use=function(e){var t=Array.prototype.slice.call(arguments,1);t.unshift(this),e.apply(this,t)},t.DocumentStore=function(e){this._save=null===e||void 0===e?!0:e,this.docs={},this.docInfo={},this.length=0},t.DocumentStore.load=function(e){var t=new this;return t.length=e.length,t.docs=e.docs,t.docInfo=e.docInfo,t._save=e.save,t},t.DocumentStore.prototype.isDocStored=function(){return this._save},t.DocumentStore.prototype.addDoc=function(t,n){this.hasDoc(t)||this.length++,this.docs[t]=this._save===!0?e(n):null},t.DocumentStore.prototype.getDoc=function(e){return this.hasDoc(e)===!1?null:this.docs[e]},t.DocumentStore.prototype.hasDoc=function(e){return e in this.docs},t.DocumentStore.prototype.removeDoc=function(e){this.hasDoc(e)&&(delete this.docs[e],delete this.docInfo[e],this.length--)},t.DocumentStore.prototype.addFieldLength=function(e,t,n){null!==e&&void 0!==e&&0!=this.hasDoc(e)&&(this.docInfo[e]||(this.docInfo[e]={}),this.docInfo[e][t]=n)},t.DocumentStore.prototype.updateFieldLength=function(e,t,n){null!==e&&void 0!==e&&0!=this.hasDoc(e)&&this.addFieldLength(e,t,n)},t.DocumentStore.prototype.getFieldLength=function(e,t){return null===e||void 0===e?0:e in this.docs&&t in this.docInfo[e]?this.docInfo[e][t]:0},t.DocumentStore.prototype.toJSON=function(){return{docs:this.docs,docInfo:this.docInfo,length:this.length,save:this._save}},t.stemmer=function(){var e={ational:"ate",tional:"tion",enci:"ence",anci:"ance",izer:"ize",bli:"ble",alli:"al",entli:"ent",eli:"e",ousli:"ous",ization:"ize",ation:"ate",ator:"ate",alism:"al",iveness:"ive",fulness:"ful",ousness:"ous",aliti:"al",iviti:"ive",biliti:"ble",logi:"log"},t={icate:"ic",ative:"",alize:"al",iciti:"ic",ical:"ic",ful:"",ness:""},n="[^aeiou]",i="[aeiouy]",o=n+"[^aeiouy]*",r=i+"[aeiou]*",s="^("+o+")?"+r+o,u="^("+o+")?"+r+o+"("+r+")?$",a="^("+o+")?"+r+o+r+o,l="^("+o+")?"+i,c=new RegExp(s),d=new RegExp(a),f=new RegExp(u),h=new RegExp(l),p=/^(.+?)(ss|i)es$/,v=/^(.+?)([^s])s$/,g=/^(.+?)eed$/,m=/^(.+?)(ed|ing)$/,y=/.$/,S=/(at|bl|iz)$/,x=new RegExp("([^aeiouylsz])\\1$"),w=new RegExp("^"+o+i+"[^aeiouwxy]$"),I=/^(.+?[^aeiou])y$/,b=/^(.+?)(ational|tional|enci|anci|izer|bli|alli|entli|eli|ousli|ization|ation|ator|alism|iveness|fulness|ousness|aliti|iviti|biliti|logi)$/,E=/^(.+?)(icate|ative|alize|iciti|ical|ful|ness)$/,D=/^(.+?)(al|ance|ence|er|ic|able|ible|ant|ement|ment|ent|ou|ism|ate|iti|ous|ive|ize)$/,F=/^(.+?)(s|t)(ion)$/,_=/^(.+?)e$/,P=/ll$/,k=new RegExp("^"+o+i+"[^aeiouwxy]$"),z=function(n){var i,o,r,s,u,a,l;if(n.length<3)return n;if(r=n.substr(0,1),"y"==r&&(n=r.toUpperCase()+n.substr(1)),s=p,u=v,s.test(n)?n=n.replace(s,"$1$2"):u.test(n)&&(n=n.replace(u,"$1$2")),s=g,u=m,s.test(n)){var z=s.exec(n);s=c,s.test(z[1])&&(s=y,n=n.replace(s,""))}else if(u.test(n)){var z=u.exec(n);i=z[1],u=h,u.test(i)&&(n=i,u=S,a=x,l=w,u.test(n)?n+="e":a.test(n)?(s=y,n=n.replace(s,"")):l.test(n)&&(n+="e"))}if(s=I,s.test(n)){var z=s.exec(n);i=z[1],n=i+"i"}if(s=b,s.test(n)){var z=s.exec(n);i=z[1],o=z[2],s=c,s.test(i)&&(n=i+e[o])}if(s=E,s.test(n)){var z=s.exec(n);i=z[1],o=z[2],s=c,s.test(i)&&(n=i+t[o])}if(s=D,u=F,s.test(n)){var z=s.exec(n);i=z[1],s=d,s.test(i)&&(n=i)}else if(u.test(n)){var z=u.exec(n);i=z[1]+z[2],u=d,u.test(i)&&(n=i)}if(s=_,s.test(n)){var z=s.exec(n);i=z[1],s=d,u=f,a=k,(s.test(i)||u.test(i)&&!a.test(i))&&(n=i)}return s=P,u=d,s.test(n)&&u.test(n)&&(s=y,n=n.replace(s,"")),"y"==r&&(n=r.toLowerCase()+n.substr(1)),n};return z}(),t.Pipeline.registerFunction(t.stemmer,"stemmer"),t.stopWordFilter=function(e){return e&&t.stopWordFilter.stopWords[e]!==!0?e:void 0},t.clearStopWords=function(){t.stopWordFilter.stopWords={}},t.addStopWords=function(e){null!=e&&Array.isArray(e)!==!1&&e.forEach(function(e){t.stopWordFilter.stopWords[e]=!0},this)},t.resetStopWords=function(){t.stopWordFilter.stopWords=t.defaultStopWords},t.defaultStopWords={"":!0,a:!0,able:!0,about:!0,across:!0,after:!0,all:!0,almost:!0,also:!0,am:!0,among:!0,an:!0,and:!0,any:!0,are:!0,as:!0,at:!0,be:!0,because:!0,been:!0,but:!0,by:!0,can:!0,cannot:!0,could:!0,dear:!0,did:!0,"do":!0,does:!0,either:!0,"else":!0,ever:!0,every:!0,"for":!0,from:!0,get:!0,got:!0,had:!0,has:!0,have:!0,he:!0,her:!0,hers:!0,him:!0,his:!0,how:!0,however:!0,i:!0,"if":!0,"in":!0,into:!0,is:!0,it:!0,its:!0,just:!0,least:!0,let:!0,like:!0,likely:!0,may:!0,me:!0,might:!0,most:!0,must:!0,my:!0,neither:!0,no:!0,nor:!0,not:!0,of:!0,off:!0,often:!0,on:!0,only:!0,or:!0,other:!0,our:!0,own:!0,rather:!0,said:!0,say:!0,says:!0,she:!0,should:!0,since:!0,so:!0,some:!0,than:!0,that:!0,the:!0,their:!0,them:!0,then:!0,there:!0,these:!0,they:!0,"this":!0,tis:!0,to:!0,too:!0,twas:!0,us:!0,wants:!0,was:!0,we:!0,were:!0,what:!0,when:!0,where:!0,which:!0,"while":!0,who:!0,whom:!0,why:!0,will:!0,"with":!0,would:!0,yet:!0,you:!0,your:!0},t.stopWordFilter.stopWords=t.defaultStopWords,t.Pipeline.registerFunction(t.stopWordFilter,"stopWordFilter"),t.trimmer=function(e){if(null===e||void 0===e)throw new Error("token should not be undefined");return e.replace(/^\W+/,"").replace(/\W+$/,"")},t.Pipeline.registerFunction(t.trimmer,"trimmer"),t.InvertedIndex=function(){this.root={docs:{},df:0}},t.InvertedIndex.load=function(e){var t=new this;return t.root=e.root,t},t.InvertedIndex.prototype.addToken=function(e,t,n){for(var n=n||this.root,i=0;i<=e.length-1;){var o=e[i];o in n||(n[o]={docs:{},df:0}),i+=1,n=n[o]}var r=t.ref;n.docs[r]?n.docs[r]={tf:t.tf}:(n.docs[r]={tf:t.tf},n.df+=1)},t.InvertedIndex.prototype.hasToken=function(e){if(!e)return!1;for(var t=this.root,n=0;n<e.length;n++){if(!t[e[n]])return!1;t=t[e[n]]}return!0},t.InvertedIndex.prototype.getNode=function(e){if(!e)return null;for(var t=this.root,n=0;n<e.length;n++){if(!t[e[n]])return null;t=t[e[n]]}return t},t.InvertedIndex.prototype.getDocs=function(e){var t=this.getNode(e);return null==t?{}:t.docs},t.InvertedIndex.prototype.getTermFrequency=function(e,t){var n=this.getNode(e);return null==n?0:t in n.docs?n.docs[t].tf:0},t.InvertedIndex.prototype.getDocFreq=function(e){var t=this.getNode(e);return null==t?0:t.df},t.InvertedIndex.prototype.removeToken=function(e,t){if(e){var n=this.getNode(e);null!=n&&t in n.docs&&(delete n.docs[t],n.df-=1)}},t.InvertedIndex.prototype.expandToken=function(e,t,n){if(null==e||""==e)return[];var t=t||[];if(void 0==n&&(n=this.getNode(e),null==n))return t;n.df>0&&t.push(e);for(var i in n)"docs"!==i&&"df"!==i&&this.expandToken(e+i,t,n[i]);return t},t.InvertedIndex.prototype.toJSON=function(){return{root:this.root}},t.Configuration=function(e,n){var e=e||"";if(void 0==n||null==n)throw new Error("fields should not be null");this.config={};var i;try{i=JSON.parse(e),this.buildUserConfig(i,n)}catch(o){t.utils.warn("user configuration parse failed, will use default configuration"),this.buildDefaultConfig(n)}},t.Configuration.prototype.buildDefaultConfig=function(e){this.reset(),e.forEach(function(e){this.config[e]={boost:1,bool:"OR",expand:!1}},this)},t.Configuration.prototype.buildUserConfig=function(e,n){var i="OR",o=!1;if(this.reset(),"bool"in e&&(i=e.bool||i),"expand"in e&&(o=e.expand||o),"fields"in e)for(var r in e.fields)if(n.indexOf(r)>-1){var s=e.fields[r],u=o;void 0!=s.expand&&(u=s.expand),this.config[r]={boost:s.boost||0===s.boost?s.boost:1,bool:s.bool||i,expand:u}}else t.utils.warn("field name in user configuration not found in index instance fields");else this.addAllFields2UserConfig(i,o,n)},t.Configuration.prototype.addAllFields2UserConfig=function(e,t,n){n.forEach(function(n){this.config[n]={boost:1,bool:e,expand:t}},this)},t.Configuration.prototype.get=function(){return this.config},t.Configuration.prototype.reset=function(){this.config={}},lunr.SortedSet=function(){this.length=0,this.elements=[]},lunr.SortedSet.load=function(e){var t=new this;return t.elements=e,t.length=e.length,t},lunr.SortedSet.prototype.add=function(){var e,t;for(e=0;e<arguments.length;e++)t=arguments[e],~this.indexOf(t)||this.elements.splice(this.locationFor(t),0,t);this.length=this.elements.length},lunr.SortedSet.prototype.toArray=function(){return this.elements.slice()},lunr.SortedSet.prototype.map=function(e,t){return this.elements.map(e,t)},lunr.SortedSet.prototype.forEach=function(e,t){return this.elements.forEach(e,t)},lunr.SortedSet.prototype.indexOf=function(e){for(var t=0,n=this.elements.length,i=n-t,o=t+Math.floor(i/2),r=this.elements[o];i>1;){if(r===e)return o;e>r&&(t=o),r>e&&(n=o),i=n-t,o=t+Math.floor(i/2),r=this.elements[o]}return r===e?o:-1},lunr.SortedSet.prototype.locationFor=function(e){for(var t=0,n=this.elements.length,i=n-t,o=t+Math.floor(i/2),r=this.elements[o];i>1;)e>r&&(t=o),r>e&&(n=o),i=n-t,o=t+Math.floor(i/2),r=this.elements[o];return r>e?o:e>r?o+1:void 0},lunr.SortedSet.prototype.intersect=function(e){for(var t=new lunr.SortedSet,n=0,i=0,o=this.length,r=e.length,s=this.elements,u=e.elements;;){if(n>o-1||i>r-1)break;s[n]!==u[i]?s[n]<u[i]?n++:s[n]>u[i]&&i++:(t.add(s[n]),n++,i++)}return t},lunr.SortedSet.prototype.clone=function(){var e=new lunr.SortedSet;return e.elements=this.toArray(),e.length=e.elements.length,e},lunr.SortedSet.prototype.union=function(e){var t,n,i;this.length>=e.length?(t=this,n=e):(t=e,n=this),i=t.clone();for(var o=0,r=n.toArray();o<r.length;o++)i.add(r[o]);return i},lunr.SortedSet.prototype.toJSON=function(){return this.toArray()},function(e,t){"function"==typeof define&&define.amd?define(t):"object"==typeof exports?module.exports=t():e.elasticlunr=t()}(this,function(){return t})}();
    /** pdoc search index */const docs = [{"fullname": "rostok", "modulename": "rostok", "kind": "module", "doc": "<p></p>\n"}, {"fullname": "rostok.block_builder", "modulename": "rostok.block_builder", "kind": "module", "doc": "<p></p>\n"}, {"fullname": "rostok.block_builder.basic_node_block", "modulename": "rostok.block_builder.basic_node_block", "kind": "module", "doc": "<p></p>\n"}, {"fullname": "rostok.block_builder.basic_node_block.SimpleBody", "modulename": "rostok.block_builder.basic_node_block", "qualname": "SimpleBody", "kind": "class", "doc": "<p>An enumeration.</p>\n", "bases": "enum.Enum"}, {"fullname": "rostok.block_builder.basic_node_block.SimpleBody.BOX", "modulename": "rostok.block_builder.basic_node_block", "qualname": "SimpleBody.BOX", "kind": "variable", "doc": "<p></p>\n", "annotation": ": rostok.block_builder.body_size.BoxSize", "default_value": " = &lt;SimpleBody.BOX: BoxSize(width=0.1, length=0.2, height=0.3)&gt;"}, {"fullname": "rostok.block_builder.basic_node_block.SimpleBody.CYLINDER", "modulename": "rostok.block_builder.basic_node_block", "qualname": "SimpleBody.CYLINDER", "kind": "variable", "doc": "<p></p>\n", "annotation": ": rostok.block_builder.body_size.CylinderSize", "default_value": " = &lt;SimpleBody.CYLINDER: CylinderSize(radius=0.1, height=2)&gt;"}, {"fullname": "rostok.block_builder.basic_node_block.SimpleBody.SPHERE", "modulename": "rostok.block_builder.basic_node_block", "qualname": "SimpleBody.SPHERE", "kind": "variable", "doc": "<p></p>\n", "annotation": ": rostok.block_builder.body_size.SphereSize", "default_value": " = &lt;SimpleBody.SPHERE: SphereSize(radius=0.1)&gt;"}, {"fullname": "rostok.block_builder.basic_node_block.SimpleBody.ELLIPSOID", "modulename": "rostok.block_builder.basic_node_block", "qualname": "SimpleBody.ELLIPSOID", "kind": "variable", "doc": "<p></p>\n", "annotation": ": rostok.block_builder.body_size.EllipsoidSize", "default_value": " = &lt;SimpleBody.ELLIPSOID: EllipsoidSize(radius_a=0.2, radius_b=0.3, radius_c=0.5)&gt;"}, {"fullname": "rostok.block_builder.basic_node_block.BlockType", "modulename": "rostok.block_builder.basic_node_block", "qualname": "BlockType", "kind": "class", "doc": "<p>An enumeration.</p>\n", "bases": "builtins.str, enum.Enum"}, {"fullname": "rostok.block_builder.basic_node_block.BlockType.TRANSFORM", "modulename": "rostok.block_builder.basic_node_block", "qualname": "BlockType.TRANSFORM", "kind": "variable", "doc": "<p></p>\n", "default_value": " = &lt;BlockType.TRANSFORM: &#x27;Transform&#x27;&gt;"}, {"fullname": "rostok.block_builder.basic_node_block.BlockType.BODY", "modulename": "rostok.block_builder.basic_node_block", "qualname": "BlockType.BODY", "kind": "variable", "doc": "<p></p>\n", "default_value": " = &lt;BlockType.BODY: &#x27;Body&#x27;&gt;"}, {"fullname": "rostok.block_builder.basic_node_block.BlockType.BRIDGE", "modulename": "rostok.block_builder.basic_node_block", "qualname": "BlockType.BRIDGE", "kind": "variable", "doc": "<p></p>\n", "default_value": " = &lt;BlockType.BRIDGE: &#x27;Bridge&#x27;&gt;"}, {"fullname": "rostok.block_builder.basic_node_block.Block", "modulename": "rostok.block_builder.basic_node_block", "qualname": "Block", "kind": "class", "doc": "<p>Helper class that provides a standard way to create an ABC using\ninheritance.</p>\n", "bases": "abc.ABC"}, {"fullname": "rostok.block_builder.basic_node_block.Block.__init__", "modulename": "rostok.block_builder.basic_node_block", "qualname": "Block.__init__", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">builder</span></span>)</span>"}, {"fullname": "rostok.block_builder.basic_node_block.Block.apply_transform", "modulename": "rostok.block_builder.basic_node_block", "qualname": "Block.apply_transform", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">in_block</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "rostok.block_builder.basic_node_block.BlockBridge", "modulename": "rostok.block_builder.basic_node_block", "qualname": "BlockBridge", "kind": "class", "doc": "<p>Helper class that provides a standard way to create an ABC using\ninheritance.</p>\n", "bases": "Block, abc.ABC"}, {"fullname": "rostok.block_builder.basic_node_block.BlockBridge.__init__", "modulename": "rostok.block_builder.basic_node_block", "qualname": "BlockBridge.__init__", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">builder</span></span>)</span>"}, {"fullname": "rostok.block_builder.basic_node_block.BlockTransform", "modulename": "rostok.block_builder.basic_node_block", "qualname": "BlockTransform", "kind": "class", "doc": "<p>Helper class that provides a standard way to create an ABC using\ninheritance.</p>\n", "bases": "Block, abc.ABC"}, {"fullname": "rostok.block_builder.basic_node_block.BlockTransform.__init__", "modulename": "rostok.block_builder.basic_node_block", "qualname": "BlockTransform.__init__", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">builder</span></span>)</span>"}, {"fullname": "rostok.block_builder.basic_node_block.BlockBody", "modulename": "rostok.block_builder.basic_node_block", "qualname": "BlockBody", "kind": "class", "doc": "<p>Helper class that provides a standard way to create an ABC using\ninheritance.</p>\n", "bases": "Block, abc.ABC"}, {"fullname": "rostok.block_builder.basic_node_block.BlockBody.__init__", "modulename": "rostok.block_builder.basic_node_block", "qualname": "BlockBody.__init__", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">builder</span></span>)</span>"}, {"fullname": "rostok.block_builder.basic_node_block.RobotBody", "modulename": "rostok.block_builder.basic_node_block", "qualname": "RobotBody", "kind": "class", "doc": "<p>Helper class that provides a standard way to create an ABC using\ninheritance.</p>\n", "bases": "abc.ABC"}, {"fullname": "rostok.block_builder.basic_node_block.RobotBody.__init__", "modulename": "rostok.block_builder.basic_node_block", "qualname": "RobotBody.__init__", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">()</span>"}, {"fullname": "rostok.block_builder.blocks_utils", "modulename": "rostok.block_builder.blocks_utils", "kind": "module", "doc": "<p></p>\n"}, {"fullname": "rostok.block_builder.blocks_utils.CollisionGroup", "modulename": "rostok.block_builder.blocks_utils", "qualname": "CollisionGroup", "kind": "class", "doc": "<p>An enumeration.</p>\n", "bases": "builtins.int, enum.Enum"}, {"fullname": "rostok.block_builder.blocks_utils.CollisionGroup.Default", "modulename": "rostok.block_builder.blocks_utils", "qualname": "CollisionGroup.Default", "kind": "variable", "doc": "<p></p>\n", "default_value": " = &lt;CollisionGroup.Default: 0&gt;"}, {"fullname": "rostok.block_builder.blocks_utils.CollisionGroup.Robot", "modulename": "rostok.block_builder.blocks_utils", "qualname": "CollisionGroup.Robot", "kind": "variable", "doc": "<p></p>\n", "default_value": " = &lt;CollisionGroup.Robot: 1&gt;"}, {"fullname": "rostok.block_builder.blocks_utils.CollisionGroup.Object", "modulename": "rostok.block_builder.blocks_utils", "qualname": "CollisionGroup.Object", "kind": "variable", "doc": "<p></p>\n", "default_value": " = &lt;CollisionGroup.Object: 2&gt;"}, {"fullname": "rostok.block_builder.blocks_utils.CollisionGroup.World", "modulename": "rostok.block_builder.blocks_utils", "qualname": "CollisionGroup.World", "kind": "variable", "doc": "<p></p>\n", "default_value": " = &lt;CollisionGroup.World: 3&gt;"}, {"fullname": "rostok.block_builder.blocks_utils.make_collide", "modulename": "rostok.block_builder.blocks_utils", "qualname": "make_collide", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"n\">body_list</span><span class=\"p\">:</span> <span class=\"nb\">list</span><span class=\"p\">[</span><span class=\"n\">rostok</span><span class=\"o\">.</span><span class=\"n\">block_builder</span><span class=\"o\">.</span><span class=\"n\">basic_node_block</span><span class=\"o\">.</span><span class=\"n\">RobotBody</span><span class=\"p\">]</span>,</span><span class=\"param\">\t<span class=\"n\">group_id</span><span class=\"p\">:</span> <span class=\"n\">rostok</span><span class=\"o\">.</span><span class=\"n\">block_builder</span><span class=\"o\">.</span><span class=\"n\">blocks_utils</span><span class=\"o\">.</span><span class=\"n\">CollisionGroup</span>,</span><span class=\"param\">\t<span class=\"n\">disable_group</span><span class=\"p\">:</span> <span class=\"nb\">list</span><span class=\"p\">[</span><span class=\"n\">rostok</span><span class=\"o\">.</span><span class=\"n\">block_builder</span><span class=\"o\">.</span><span class=\"n\">blocks_utils</span><span class=\"o\">.</span><span class=\"n\">CollisionGroup</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"kc\">None</span>,</span><span class=\"param\">\t<span class=\"n\">self_colide</span><span class=\"o\">=</span><span class=\"kc\">False</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "rostok.block_builder.blocks_utils.NodeFeatures", "modulename": "rostok.block_builder.blocks_utils", "qualname": "NodeFeatures", "kind": "class", "doc": "<p></p>\n"}, {"fullname": "rostok.block_builder.blocks_utils.NodeFeatures.__init__", "modulename": "rostok.block_builder.blocks_utils", "qualname": "NodeFeatures.__init__", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">()</span>"}, {"fullname": "rostok.block_builder.blocks_utils.NodeFeatures.is_joint", "modulename": "rostok.block_builder.blocks_utils", "qualname": "NodeFeatures.is_joint", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">node</span><span class=\"p\">:</span> <span class=\"n\">rostok</span><span class=\"o\">.</span><span class=\"n\">graph_grammar</span><span class=\"o\">.</span><span class=\"n\">node</span><span class=\"o\">.</span><span class=\"n\">Node</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "rostok.block_builder.blocks_utils.NodeFeatures.is_body", "modulename": "rostok.block_builder.blocks_utils", "qualname": "NodeFeatures.is_body", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">node</span><span class=\"p\">:</span> <span class=\"n\">rostok</span><span class=\"o\">.</span><span class=\"n\">graph_grammar</span><span class=\"o\">.</span><span class=\"n\">node</span><span class=\"o\">.</span><span class=\"n\">Node</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "rostok.block_builder.blocks_utils.NodeFeatures.is_transform", "modulename": "rostok.block_builder.blocks_utils", "qualname": "NodeFeatures.is_transform", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">node</span><span class=\"p\">:</span> <span class=\"n\">rostok</span><span class=\"o\">.</span><span class=\"n\">graph_grammar</span><span class=\"o\">.</span><span class=\"n\">node</span><span class=\"o\">.</span><span class=\"n\">Node</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "rostok.block_builder.body_size", "modulename": "rostok.block_builder.body_size", "kind": "module", "doc": "<p></p>\n"}, {"fullname": "rostok.block_builder.body_size.BoxSize", "modulename": "rostok.block_builder.body_size", "qualname": "BoxSize", "kind": "class", "doc": "<p>BoxSize(width, length, height)</p>\n", "bases": "builtins.tuple"}, {"fullname": "rostok.block_builder.body_size.BoxSize.__init__", "modulename": "rostok.block_builder.body_size", "qualname": "BoxSize.__init__", "kind": "function", "doc": "<p>Create new instance of BoxSize(width, length, height)</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">width</span>, </span><span class=\"param\"><span class=\"n\">length</span>, </span><span class=\"param\"><span class=\"n\">height</span></span>)</span>"}, {"fullname": "rostok.block_builder.body_size.BoxSize.width", "modulename": "rostok.block_builder.body_size", "qualname": "BoxSize.width", "kind": "variable", "doc": "<p>Alias for field number 0</p>\n"}, {"fullname": "rostok.block_builder.body_size.BoxSize.length", "modulename": "rostok.block_builder.body_size", "qualname": "BoxSize.length", "kind": "variable", "doc": "<p>Alias for field number 1</p>\n"}, {"fullname": "rostok.block_builder.body_size.BoxSize.height", "modulename": "rostok.block_builder.body_size", "qualname": "BoxSize.height", "kind": "variable", "doc": "<p>Alias for field number 2</p>\n"}, {"fullname": "rostok.block_builder.body_size.CylinderSize", "modulename": "rostok.block_builder.body_size", "qualname": "CylinderSize", "kind": "class", "doc": "<p>CylinderSize(radius, height)</p>\n", "bases": "builtins.tuple"}, {"fullname": "rostok.block_builder.body_size.CylinderSize.__init__", "modulename": "rostok.block_builder.body_size", "qualname": "CylinderSize.__init__", "kind": "function", "doc": "<p>Create new instance of CylinderSize(radius, height)</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">radius</span>, </span><span class=\"param\"><span class=\"n\">height</span></span>)</span>"}, {"fullname": "rostok.block_builder.body_size.CylinderSize.radius", "modulename": "rostok.block_builder.body_size", "qualname": "CylinderSize.radius", "kind": "variable", "doc": "<p>Alias for field number 0</p>\n"}, {"fullname": "rostok.block_builder.body_size.CylinderSize.height", "modulename": "rostok.block_builder.body_size", "qualname": "CylinderSize.height", "kind": "variable", "doc": "<p>Alias for field number 1</p>\n"}, {"fullname": "rostok.block_builder.body_size.SphereSize", "modulename": "rostok.block_builder.body_size", "qualname": "SphereSize", "kind": "class", "doc": "<p>SphereSize(radius,)</p>\n", "bases": "builtins.tuple"}, {"fullname": "rostok.block_builder.body_size.SphereSize.__init__", "modulename": "rostok.block_builder.body_size", "qualname": "SphereSize.__init__", "kind": "function", "doc": "<p>Create new instance of SphereSize(radius,)</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">radius</span></span>)</span>"}, {"fullname": "rostok.block_builder.body_size.SphereSize.radius", "modulename": "rostok.block_builder.body_size", "qualname": "SphereSize.radius", "kind": "variable", "doc": "<p>Alias for field number 0</p>\n"}, {"fullname": "rostok.block_builder.body_size.EllipsoidSize", "modulename": "rostok.block_builder.body_size", "qualname": "EllipsoidSize", "kind": "class", "doc": "<p>EllipsoidSize(radius_a, radius_b, radius_c)</p>\n", "bases": "builtins.tuple"}, {"fullname": "rostok.block_builder.body_size.EllipsoidSize.__init__", "modulename": "rostok.block_builder.body_size", "qualname": "EllipsoidSize.__init__", "kind": "function", "doc": "<p>Create new instance of EllipsoidSize(radius_a, radius_b, radius_c)</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">radius_a</span>, </span><span class=\"param\"><span class=\"n\">radius_b</span>, </span><span class=\"param\"><span class=\"n\">radius_c</span></span>)</span>"}, {"fullname": "rostok.block_builder.body_size.EllipsoidSize.radius_a", "modulename": "rostok.block_builder.body_size", "qualname": "EllipsoidSize.radius_a", "kind": "variable", "doc": "<p>Alias for field number 0</p>\n"}, {"fullname": "rostok.block_builder.body_size.EllipsoidSize.radius_b", "modulename": "rostok.block_builder.body_size", "qualname": "EllipsoidSize.radius_b", "kind": "variable", "doc": "<p>Alias for field number 1</p>\n"}, {"fullname": "rostok.block_builder.body_size.EllipsoidSize.radius_c", "modulename": "rostok.block_builder.body_size", "qualname": "EllipsoidSize.radius_c", "kind": "variable", "doc": "<p>Alias for field number 2</p>\n"}, {"fullname": "rostok.block_builder.control", "modulename": "rostok.block_builder.control", "kind": "module", "doc": "<p></p>\n"}, {"fullname": "rostok.block_builder.control.get_controllable_joints", "modulename": "rostok.block_builder.control", "qualname": "get_controllable_joints", "kind": "function", "doc": "<p>Create 2D-list joints from list of blocks. First index is the number\n    partition graph, second index is the number of joint</p>\n\n<p>Args:\n    blocks (list[Block]): List of blocks from graph\nReturns:\n    list[list]: List of joints</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">blocks</span><span class=\"p\">:</span> <span class=\"nb\">list</span><span class=\"p\">[</span><span class=\"n\">rostok</span><span class=\"o\">.</span><span class=\"n\">block_builder</span><span class=\"o\">.</span><span class=\"n\">basic_node_block</span><span class=\"o\">.</span><span class=\"n\">Block</span><span class=\"p\">]</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "rostok.block_builder.control.time_points_2_ch_function", "modulename": "rostok.block_builder.control", "qualname": "time_points_2_ch_function", "kind": "function", "doc": "<p>Transform 2-D array [time, points] to ChSpline subclass ChFunction</p>\n\n<p>Args:\n    arr_time_point (list[list]): 2D-list of values(times)</p>\n\n<p>Returns:\n    ChSpline: Chrono function of spline points</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">arr_time_point</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "rostok.block_builder.control.points_2_ch_function", "modulename": "rostok.block_builder.control", "qualname": "points_2_ch_function", "kind": "function", "doc": "<p>Transform 1-D array on the time interval to ChSpline subclass ChFunction</p>\n\n<p>Args:\n    des_points (list): List of values which define spline\n    time_interval (tuple): Interval between time start and finish points </p>\n\n<p>Returns:\n    ChSpline: Chrono function of spline points</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">des_points</span>, </span><span class=\"param\"><span class=\"n\">time_interval</span><span class=\"p\">:</span> <span class=\"nb\">tuple</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "rostok.block_builder.control.ChCustomFunction", "modulename": "rostok.block_builder.control", "qualname": "ChCustomFunction", "kind": "class", "doc": "<p>Proxy of C++ chrono::ChFunction class.</p>\n", "bases": "pychrono.core.ChFunction"}, {"fullname": "rostok.block_builder.control.ChCustomFunction.__init__", "modulename": "rostok.block_builder.control", "qualname": "ChCustomFunction.__init__", "kind": "function", "doc": "<p>Create custom chrono function\nArgs:\n    function (link to function): Link to function which convert to chrono function</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">function</span>, </span><span class=\"param\"><span class=\"o\">*</span><span class=\"n\">args</span>, </span><span class=\"param\"><span class=\"o\">**</span><span class=\"n\">kwargs</span></span>)</span>"}, {"fullname": "rostok.block_builder.control.ChCustomFunction.Clone", "modulename": "rostok.block_builder.control", "qualname": "ChCustomFunction.Clone", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "rostok.block_builder.control.ChCustomFunction.Get_y", "modulename": "rostok.block_builder.control", "qualname": "ChCustomFunction.Get_y", "kind": "function", "doc": "<p>Get_y(ChFunction self, double x) -> double</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">x</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "rostok.block_builder.control.ChSpline", "modulename": "rostok.block_builder.control", "qualname": "ChSpline", "kind": "class", "doc": "<p>Proxy of C++ chrono::ChFunction class.</p>\n", "bases": "pychrono.core.ChFunction"}, {"fullname": "rostok.block_builder.control.ChSpline.__init__", "modulename": "rostok.block_builder.control", "qualname": "ChSpline.__init__", "kind": "function", "doc": "<p>Class of spline function on chrono</p>\n\n<p>Args:\n    coefficients (list): List of coefficients cubic spline\n    time_interval (tuple): Time interval of spline</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">coefficients</span>, </span><span class=\"param\"><span class=\"n\">time_interval</span></span>)</span>"}, {"fullname": "rostok.block_builder.control.ChSpline.Clone", "modulename": "rostok.block_builder.control", "qualname": "ChSpline.Clone", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "rostok.block_builder.control.ChSpline.Get_y", "modulename": "rostok.block_builder.control", "qualname": "ChSpline.Get_y", "kind": "function", "doc": "<p>Get_y(ChFunction self, double x) -> double</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">x</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "rostok.block_builder.control.ChPID", "modulename": "rostok.block_builder.control", "qualname": "ChPID", "kind": "class", "doc": "<p>Proxy of C++ chrono::ChFunction_SetpointCallback class.</p>\n", "bases": "pychrono.core.ChFunction_SetpointCallback"}, {"fullname": "rostok.block_builder.control.ChPID.__init__", "modulename": "rostok.block_builder.control", "qualname": "ChPID.__init__", "kind": "function", "doc": "<p>Subclass ChFunction. PID-function calculate inputs for current time</p>\n\n<p>Args:\n    joint (ChMotor): Chrono Motor of joint\n    proportional_coefficient (float): proportional coefficient of PID\n    differential_coefficient (float): differential coefficient of PID\n    integral_coefficients (float): integral coefficient of PID. Defaults to 0..</p>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"n\">joint</span>,</span><span class=\"param\">\t<span class=\"n\">proportional_coefficient</span>,</span><span class=\"param\">\t<span class=\"n\">differential_coefficient</span>,</span><span class=\"param\">\t<span class=\"n\">integral_coefficients</span><span class=\"o\">=</span><span class=\"mf\">0.0</span></span>)</span>"}, {"fullname": "rostok.block_builder.control.ChPID.Clone", "modulename": "rostok.block_builder.control", "qualname": "ChPID.Clone", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "rostok.block_builder.control.ChPID.set_des_point", "modulename": "rostok.block_builder.control", "qualname": "ChPID.set_des_point", "kind": "function", "doc": "<p>Setter the value against which the error is calculate</p>\n\n<p>Args:\n    des_position (float): Value of desired point to controller value</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">des_position</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "rostok.block_builder.control.ChPID.SetpointCallback", "modulename": "rostok.block_builder.control", "qualname": "ChPID.SetpointCallback", "kind": "function", "doc": "<p>SetpointCallback(ChFunction_SetpointCallback self, double const x) -> double</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">x</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "rostok.block_builder.control.ChronoControl", "modulename": "rostok.block_builder.control", "qualname": "ChronoControl", "kind": "class", "doc": "<p>Helper class that provides a standard way to create an ABC using\ninheritance.</p>\n", "bases": "abc.ABC"}, {"fullname": "rostok.block_builder.control.ChronoControl.__init__", "modulename": "rostok.block_builder.control", "qualname": "ChronoControl.__init__", "kind": "function", "doc": "<p>Abstract class of control for chrono joint (ChMotor)</p>\n\n<p>Args:\n    joint_block (ChMotor): Object to create the controller</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">joint_block</span></span>)</span>"}, {"fullname": "rostok.block_builder.control.ChronoControl.get_joint", "modulename": "rostok.block_builder.control", "qualname": "ChronoControl.get_joint", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "rostok.block_builder.control.ChronoControl.get_type_input", "modulename": "rostok.block_builder.control", "qualname": "ChronoControl.get_type_input", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "rostok.block_builder.control.ChronoControl.set_input", "modulename": "rostok.block_builder.control", "qualname": "ChronoControl.set_input", "kind": "function", "doc": "<p>Define type of input joint</p>\n\n<p>Args:\n    inputs (ChFunction): Chrono function of input controller</p>\n\n<p>Raises:\n    Exception: If joints is uncontrollable</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">inputs</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "rostok.block_builder.control.RampControl", "modulename": "rostok.block_builder.control", "qualname": "RampControl", "kind": "class", "doc": "<p>Helper class that provides a standard way to create an ABC using\ninheritance.</p>\n", "bases": "ChronoControl"}, {"fullname": "rostok.block_builder.control.RampControl.__init__", "modulename": "rostok.block_builder.control", "qualname": "RampControl.__init__", "kind": "function", "doc": "<p>Class ramp input on joint</p>\n\n<p>Args:\n    in_joint_block (ChMotor): Object to create the controller\n    y_0 (float): Initial values ramp function. Defaults to 0..\n    angular (float): Angle of ramp function. Defaults to -0.5.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">in_joint_block</span>, </span><span class=\"param\"><span class=\"n\">y_0</span><span class=\"o\">=</span><span class=\"mf\">0.0</span>, </span><span class=\"param\"><span class=\"n\">angular</span><span class=\"o\">=-</span><span class=\"mf\">0.5</span></span>)</span>"}, {"fullname": "rostok.block_builder.control.TrackingControl", "modulename": "rostok.block_builder.control", "qualname": "TrackingControl", "kind": "class", "doc": "<p>Helper class that provides a standard way to create an ABC using\ninheritance.</p>\n", "bases": "ChronoControl"}, {"fullname": "rostok.block_builder.control.TrackingControl.__init__", "modulename": "rostok.block_builder.control", "qualname": "TrackingControl.__init__", "kind": "function", "doc": "<p>Class tracking the trajectory at the position input</p>\n\n<p>Args:\n    in_joint_block (ChMotor)): Object to create controller</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">in_joint_block</span></span>)</span>"}, {"fullname": "rostok.block_builder.control.TrackingControl.set_des_positions_interval", "modulename": "rostok.block_builder.control", "qualname": "TrackingControl.set_des_positions_interval", "kind": "function", "doc": "<p>Setter the desired trajectory on time interval</p>\n\n<p>Args:\n    des_positions (np.array): Desired trajectory on the points\n    time_interval (tuple): (start, stop) time interval of trajectory</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">des_positions</span><span class=\"p\">:</span> <span class=\"o\">&lt;</span><span class=\"n\">built</span><span class=\"o\">-</span><span class=\"ow\">in</span> <span class=\"n\">function</span> <span class=\"n\">array</span><span class=\"o\">&gt;</span>, </span><span class=\"param\"><span class=\"n\">time_interval</span><span class=\"p\">:</span> <span class=\"nb\">tuple</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "rostok.block_builder.control.TrackingControl.set_des_positions", "modulename": "rostok.block_builder.control", "qualname": "TrackingControl.set_des_positions", "kind": "function", "doc": "<p>Setter the desired trajectory how 2D array [[time, position],...]</p>\n\n<p>Args:\n    des_arr_time_to_pos (np.array): 2D array time value of the desired trajectory</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">des_arr_time_to_pos</span><span class=\"p\">:</span> <span class=\"o\">&lt;</span><span class=\"n\">built</span><span class=\"o\">-</span><span class=\"ow\">in</span> <span class=\"n\">function</span> <span class=\"n\">array</span><span class=\"o\">&gt;</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "rostok.block_builder.control.TrackingControl.set_function_trajectory", "modulename": "rostok.block_builder.control", "qualname": "TrackingControl.set_function_trajectory", "kind": "function", "doc": "<p>Setter the desired trajectory how python function</p>\n\n<p>Args:\n    function (def): Link to the function which generate values the desired trajectory each time</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">function</span>, </span><span class=\"param\"><span class=\"o\">*</span><span class=\"n\">args</span>, </span><span class=\"param\"><span class=\"o\">**</span><span class=\"n\">kwargs</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "rostok.block_builder.control.ChControllerPID", "modulename": "rostok.block_builder.control", "qualname": "ChControllerPID", "kind": "class", "doc": "<p>Helper class that provides a standard way to create an ABC using\ninheritance.</p>\n", "bases": "ChronoControl"}, {"fullname": "rostok.block_builder.control.ChControllerPID.__init__", "modulename": "rostok.block_builder.control", "qualname": "ChControllerPID.__init__", "kind": "function", "doc": "<p>Class of PID tracking controller</p>\n\n<p>Args:\n    joint (ChMotor): Chrono Motor of joint\n    proportional_coefficient (float): proportional coefficient of PID\n    differential_coefficient (float): differential coefficient of PID\n    integral_coefficients (float): integral coefficient of PID. Defaults to 0..</p>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"n\">joint_block</span>,</span><span class=\"param\">\t<span class=\"n\">proportional_coefficient</span>,</span><span class=\"param\">\t<span class=\"n\">differential_coefficient</span>,</span><span class=\"param\">\t<span class=\"n\">integral_coefficients</span><span class=\"o\">=</span><span class=\"mf\">0.0</span></span>)</span>"}, {"fullname": "rostok.block_builder.control.ChControllerPID.set_des_positions_interval", "modulename": "rostok.block_builder.control", "qualname": "ChControllerPID.set_des_positions_interval", "kind": "function", "doc": "<p>Setter the desired trajectory on time interval</p>\n\n<p>Args:\n    des_positions (np.array): Desired trajectory on the points\n    time_interval (tuple): (start, stop) time interval of trajectory</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">des_pos</span><span class=\"p\">:</span> <span class=\"o\">&lt;</span><span class=\"n\">built</span><span class=\"o\">-</span><span class=\"ow\">in</span> <span class=\"n\">function</span> <span class=\"n\">array</span><span class=\"o\">&gt;</span>, </span><span class=\"param\"><span class=\"n\">time_interval</span><span class=\"p\">:</span> <span class=\"nb\">tuple</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "rostok.block_builder.control.ChControllerPID.set_des_time_positions", "modulename": "rostok.block_builder.control", "qualname": "ChControllerPID.set_des_time_positions", "kind": "function", "doc": "<p>Setter the desired trajectory how 2D array [[time, position],...]</p>\n\n<p>Args:\n    des_arr_time_to_pos (np.array): 2D array time value of the desired trajectory</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">des_arr_time_to_pos</span><span class=\"p\">:</span> <span class=\"o\">&lt;</span><span class=\"n\">built</span><span class=\"o\">-</span><span class=\"ow\">in</span> <span class=\"n\">function</span> <span class=\"n\">array</span><span class=\"o\">&gt;</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "rostok.block_builder.control.ChControllerPID.set_function_trajectory", "modulename": "rostok.block_builder.control", "qualname": "ChControllerPID.set_function_trajectory", "kind": "function", "doc": "<p>Setter the desired trajectory how python function</p>\n\n<p>Args:\n    function (def): Link to the function which generate values the desired trajectory each time</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">function</span>, </span><span class=\"param\"><span class=\"o\">*</span><span class=\"n\">args</span>, </span><span class=\"param\"><span class=\"o\">**</span><span class=\"n\">kwargs</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "rostok.block_builder.control.ConstControl", "modulename": "rostok.block_builder.control", "qualname": "ConstControl", "kind": "class", "doc": "<p>Helper class that provides a standard way to create an ABC using\ninheritance.</p>\n", "bases": "ChronoControl"}, {"fullname": "rostok.block_builder.control.ConstControl.__init__", "modulename": "rostok.block_builder.control", "qualname": "ConstControl.__init__", "kind": "function", "doc": "<p>Abstract class of control for chrono joint (ChMotor)</p>\n\n<p>Args:\n    joint_block (ChMotor): Object to create the controller</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">in_joint_block</span>, </span><span class=\"param\"><span class=\"n\">T</span><span class=\"o\">=</span><span class=\"mf\">0.0</span></span>)</span>"}, {"fullname": "rostok.block_builder.node_render", "modulename": "rostok.block_builder.node_render", "kind": "module", "doc": "<p></p>\n"}, {"fullname": "rostok.block_builder.node_render.SpringTorque", "modulename": "rostok.block_builder.node_render", "qualname": "SpringTorque", "kind": "class", "doc": "<p>Proxy of C++ chrono::ChLinkRSDA::TorqueFunctor class.</p>\n", "bases": "pychrono.core.TorqueFunctor"}, {"fullname": "rostok.block_builder.node_render.SpringTorque.__init__", "modulename": "rostok.block_builder.node_render", "qualname": "SpringTorque.__init__", "kind": "function", "doc": "<p>__init__(TorqueFunctor self) -> TorqueFunctor</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">spring_coef</span>, </span><span class=\"param\"><span class=\"n\">damping_coef</span>, </span><span class=\"param\"><span class=\"n\">rest_angle</span></span>)</span>"}, {"fullname": "rostok.block_builder.node_render.SpringTorque.evaluate", "modulename": "rostok.block_builder.node_render", "qualname": "SpringTorque.evaluate", "kind": "function", "doc": "<p>evaluate(TorqueFunctor self, double time, double angle, double vel, ChLinkRSDA link) -> double</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">time</span>, </span><span class=\"param\"><span class=\"n\">angle</span>, </span><span class=\"param\"><span class=\"n\">vel</span>, </span><span class=\"param\"><span class=\"n\">link</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "rostok.block_builder.node_render.ContactReporter", "modulename": "rostok.block_builder.node_render", "qualname": "ContactReporter", "kind": "class", "doc": "<p>Proxy of C++ chrono::ChContactContainer::ReportContactCallback class.</p>\n", "bases": "pychrono.core.ReportContactCallback"}, {"fullname": "rostok.block_builder.node_render.ContactReporter.__init__", "modulename": "rostok.block_builder.node_render", "qualname": "ContactReporter.__init__", "kind": "function", "doc": "<p>Create a sensor of contact normal forces for the body</p>\n\n<p>Args:\n    chrono_body (ChBody): The body on which the sensor is install</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">chrono_body</span></span>)</span>"}, {"fullname": "rostok.block_builder.node_render.ContactReporter.OnReportContact", "modulename": "rostok.block_builder.node_render", "qualname": "ContactReporter.OnReportContact", "kind": "function", "doc": "<p>OnReportContact(ReportContactCallback self, ChVectorD pA, ChVectorD pB, ChMatrix33D plane_coord, double const &amp; distance, double const &amp; eff_radius, ChVectorD react_forces, ChVectorD react_torques, ChContactable contactobjA, ChContactable contactobjB) -> bool</p>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"bp\">self</span>,</span><span class=\"param\">\t<span class=\"n\">pA</span>,</span><span class=\"param\">\t<span class=\"n\">pB</span>,</span><span class=\"param\">\t<span class=\"n\">plane_coord</span>,</span><span class=\"param\">\t<span class=\"n\">distance</span>,</span><span class=\"param\">\t<span class=\"n\">eff_radius</span>,</span><span class=\"param\">\t<span class=\"n\">cforce</span>,</span><span class=\"param\">\t<span class=\"n\">ctorque</span>,</span><span class=\"param\">\t<span class=\"n\">modA</span>,</span><span class=\"param\">\t<span class=\"n\">modB</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "rostok.block_builder.node_render.ContactReporter.is_empty", "modulename": "rostok.block_builder.node_render", "qualname": "ContactReporter.is_empty", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "rostok.block_builder.node_render.ContactReporter.list_clear", "modulename": "rostok.block_builder.node_render", "qualname": "ContactReporter.list_clear", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "rostok.block_builder.node_render.ContactReporter.get_normal_forces", "modulename": "rostok.block_builder.node_render", "qualname": "ContactReporter.get_normal_forces", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "rostok.block_builder.node_render.ContactReporter.get_list_n_forces", "modulename": "rostok.block_builder.node_render", "qualname": "ContactReporter.get_list_n_forces", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "rostok.block_builder.node_render.ChronoBody", "modulename": "rostok.block_builder.node_render", "qualname": "ChronoBody", "kind": "class", "doc": "<p>Abstract class, that interpreting nodes of a robot body part in a physics engine (<code>pychrono</code>).</p>\n\n<p>Attributes:\n    body (pychrono.ChBody): Pychrono object of the solid body. It defines visualisation, collision shape, position on the world frame and etc in simulation system.\n    builder (pychrono.ChSystem): Pychrono object of system, which hosts the body.</p>\n\n<p>Args:\n    builder (pychrono.ChSystem): Arg sets the system, which hosth the body\n    body (pychrono.ChBody): Solid body define nodes of the body part in the physics system\n    in_pos_marker (pychrono.ChVectorD): Arg defines position input frame the body\n    out_pos_marker (chrono.ChVectorD): Arg defines position output frame the body\n    random_color (bool): Flag of the random color of the body\n    is_collide (bool, optional): Flag of collision body with other objects in system.. Defaults to True.</p>\n", "bases": "rostok.block_builder.basic_node_block.BlockBody, abc.ABC"}, {"fullname": "rostok.block_builder.node_render.ChronoBody.__init__", "modulename": "rostok.block_builder.node_render", "qualname": "ChronoBody.__init__", "kind": "function", "doc": "<p>Abstract class of interpretation of nodes of a robot body part in a physics engine</p>\n\n<p>Initlization adds body in system, creates input and output marker of the body and sets them. Also,it initilize object of the contact reporter</p>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"n\">builder</span><span class=\"p\">:</span> <span class=\"n\">pychrono</span><span class=\"o\">.</span><span class=\"n\">core</span><span class=\"o\">.</span><span class=\"n\">ChSystem</span>,</span><span class=\"param\">\t<span class=\"n\">body</span><span class=\"p\">:</span> <span class=\"n\">pychrono</span><span class=\"o\">.</span><span class=\"n\">core</span><span class=\"o\">.</span><span class=\"n\">ChBody</span>,</span><span class=\"param\">\t<span class=\"n\">in_pos_marker</span><span class=\"p\">:</span> <span class=\"n\">pychrono</span><span class=\"o\">.</span><span class=\"n\">core</span><span class=\"o\">.</span><span class=\"n\">ChVectorD</span>,</span><span class=\"param\">\t<span class=\"n\">out_pos_marker</span><span class=\"p\">:</span> <span class=\"n\">pychrono</span><span class=\"o\">.</span><span class=\"n\">core</span><span class=\"o\">.</span><span class=\"n\">ChVectorD</span>,</span><span class=\"param\">\t<span class=\"n\">random_color</span><span class=\"p\">:</span> <span class=\"nb\">bool</span>,</span><span class=\"param\">\t<span class=\"n\">is_collide</span><span class=\"p\">:</span> <span class=\"nb\">bool</span> <span class=\"o\">=</span> <span class=\"kc\">True</span></span>)</span>"}, {"fullname": "rostok.block_builder.node_render.ChronoBody.move_to_out_frame", "modulename": "rostok.block_builder.node_render", "qualname": "ChronoBody.move_to_out_frame", "kind": "function", "doc": "<p>Move the input frame body to output frame position input block</p>\n\n<p>Args:\n    in_block (Block): The block defines relative movming to output frame</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">in_block</span><span class=\"p\">:</span> <span class=\"n\">rostok</span><span class=\"o\">.</span><span class=\"n\">block_builder</span><span class=\"o\">.</span><span class=\"n\">basic_node_block</span><span class=\"o\">.</span><span class=\"n\">Block</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "rostok.block_builder.node_render.ChronoBody.make_fix_joint", "modulename": "rostok.block_builder.node_render", "qualname": "ChronoBody.make_fix_joint", "kind": "function", "doc": "<p>Create weld joint (fixing relative posiotion and orientation) between input block and the body</p>\n\n<p>Args:\n    in_block (Block): The block which define relative fixing position and orientation the body in system</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">in_block</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "rostok.block_builder.node_render.ChronoBody.reset_transformed_frame_out", "modulename": "rostok.block_builder.node_render", "qualname": "ChronoBody.reset_transformed_frame_out", "kind": "function", "doc": "<p>Reset all transforms output frame of the body and back to initial state</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "rostok.block_builder.node_render.ChronoBody.apply_transform", "modulename": "rostok.block_builder.node_render", "qualname": "ChronoBody.apply_transform", "kind": "function", "doc": "<p>Aplied input tranformation to the output frame of the body</p>\n\n<p>Args:\n    in_block (BlockTransform): The block which define transormations</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">in_block</span><span class=\"p\">:</span> <span class=\"n\">rostok</span><span class=\"o\">.</span><span class=\"n\">block_builder</span><span class=\"o\">.</span><span class=\"n\">basic_node_block</span><span class=\"o\">.</span><span class=\"n\">BlockTransform</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "rostok.block_builder.node_render.ChronoBody.ref_frame_in", "modulename": "rostok.block_builder.node_render", "qualname": "ChronoBody.ref_frame_in", "kind": "variable", "doc": "<p>Return the input frame of the body</p>\n\n<p>Returns:\n    pychrono.ChMarker: The input frame of the body</p>\n", "annotation": ": pychrono.core.ChMarker"}, {"fullname": "rostok.block_builder.node_render.ChronoBody.normal_force", "modulename": "rostok.block_builder.node_render", "qualname": "ChronoBody.normal_force", "kind": "variable", "doc": "<p>Return value normal forces of random collision point</p>\n\n<p>Returns:\n    float: Value normal forces of random collision point</p>\n", "annotation": ": float"}, {"fullname": "rostok.block_builder.node_render.ChronoBody.list_n_forces", "modulename": "rostok.block_builder.node_render", "qualname": "ChronoBody.list_n_forces", "kind": "variable", "doc": "<p>Return a list of all the contact forces</p>\n\n<p>Returns:\n    list: List normal forces of all the contacts points</p>\n", "annotation": ": list"}, {"fullname": "rostok.block_builder.node_render.BoxChronoBody", "modulename": "rostok.block_builder.node_render", "qualname": "BoxChronoBody", "kind": "class", "doc": "<p>Class of the simple box body shape of robot on pychrono engine. It defines interpretation of node of body part in physic system <code>pychrono</code></p>\n\n<p>Args:\n    builder (chrono.ChSystem): Arg sets the system, which hosth the body\n    size (BoxSize, optional): Size of the body box. Defaults to BoxSize(0.1, 0.1, 0.1).\n    random_color (bool, optional): Flag of the random color of the body. Defaults to True.\n    mass (float, optional): Value mass of the body box. Defaults to 1.\n    material (Material, optional): Surface material, which define contact friction and etc. Defaults to DefaultChronoMaterial.\n    is_collide (bool, optional): Flag of collision body with othe object in system. Defaults to True.</p>\n", "bases": "ChronoBody, rostok.block_builder.basic_node_block.RobotBody"}, {"fullname": "rostok.block_builder.node_render.BoxChronoBody.__init__", "modulename": "rostok.block_builder.node_render", "qualname": "BoxChronoBody.__init__", "kind": "function", "doc": "<p>Abstract class of interpretation of nodes of a robot body part in a physics engine</p>\n\n<p>Initlization adds body in system, creates input and output marker of the body and sets them. Also,it initilize object of the contact reporter</p>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"n\">builder</span><span class=\"p\">:</span> <span class=\"n\">pychrono</span><span class=\"o\">.</span><span class=\"n\">core</span><span class=\"o\">.</span><span class=\"n\">ChSystem</span>,</span><span class=\"param\">\t<span class=\"n\">size</span><span class=\"p\">:</span> <span class=\"n\">rostok</span><span class=\"o\">.</span><span class=\"n\">block_builder</span><span class=\"o\">.</span><span class=\"n\">body_size</span><span class=\"o\">.</span><span class=\"n\">BoxSize</span> <span class=\"o\">=</span> <span class=\"n\">BoxSize</span><span class=\"p\">(</span><span class=\"n\">width</span><span class=\"o\">=</span><span class=\"mf\">0.1</span><span class=\"p\">,</span> <span class=\"n\">length</span><span class=\"o\">=</span><span class=\"mf\">0.1</span><span class=\"p\">,</span> <span class=\"n\">height</span><span class=\"o\">=</span><span class=\"mf\">0.1</span><span class=\"p\">)</span>,</span><span class=\"param\">\t<span class=\"n\">random_color</span><span class=\"p\">:</span> <span class=\"nb\">bool</span> <span class=\"o\">=</span> <span class=\"kc\">True</span>,</span><span class=\"param\">\t<span class=\"n\">mass</span><span class=\"p\">:</span> <span class=\"nb\">float</span> <span class=\"o\">=</span> <span class=\"mi\">1</span>,</span><span class=\"param\">\t<span class=\"n\">material</span><span class=\"p\">:</span> <span class=\"n\">rostok</span><span class=\"o\">.</span><span class=\"n\">utils</span><span class=\"o\">.</span><span class=\"n\">dataset_materials</span><span class=\"o\">.</span><span class=\"n\">material_dataclass_manipulating</span><span class=\"o\">.</span><span class=\"n\">Material</span> <span class=\"o\">=</span> <span class=\"n\">DefaultChronoMaterial</span><span class=\"p\">(</span><span class=\"n\">name</span><span class=\"o\">=</span><span class=\"s1\">&#39;default&#39;</span><span class=\"p\">,</span> <span class=\"n\">type_class</span><span class=\"o\">=</span><span class=\"s1\">&#39;ChMaterialSurfaceNSC&#39;</span><span class=\"p\">)</span>,</span><span class=\"param\">\t<span class=\"n\">is_collide</span><span class=\"p\">:</span> <span class=\"nb\">bool</span> <span class=\"o\">=</span> <span class=\"kc\">True</span></span>)</span>"}, {"fullname": "rostok.block_builder.node_render.LinkChronoBody", "modulename": "rostok.block_builder.node_render", "qualname": "LinkChronoBody", "kind": "class", "doc": "<p>Class interpretation of node of the link robot in physic engine <code>pychrono</code>.</p>\n\n<p>Args:\n    builder (chrono.ChSystem): Arg sets the system, which hosth the body\n    length (float): Length of the robot link. Defaults to 2.\n    width (float): Width of the robot link. Defaults to 0.1.\n    depth (float): Height of the robot link. Defaults to 0.3.\n    random_color (bool, optional): Flag of the random color of the body. Defaults to True.\n    mass (float, optional): Value mass of the body box. Defaults to 1.\n    material (Material, optional): Surface material, which define contact friction and etc. Defaults to DefaultChronoMaterial.\n    is_collide (bool, optional): Flag of collision body with othe object in system. Defaults to True.</p>\n", "bases": "ChronoBody, rostok.block_builder.basic_node_block.RobotBody"}, {"fullname": "rostok.block_builder.node_render.LinkChronoBody.__init__", "modulename": "rostok.block_builder.node_render", "qualname": "LinkChronoBody.__init__", "kind": "function", "doc": "<p>Abstract class of interpretation of nodes of a robot body part in a physics engine</p>\n\n<p>Initlization adds body in system, creates input and output marker of the body and sets them. Also,it initilize object of the contact reporter</p>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"n\">builder</span><span class=\"p\">:</span> <span class=\"n\">pychrono</span><span class=\"o\">.</span><span class=\"n\">core</span><span class=\"o\">.</span><span class=\"n\">ChSystem</span>,</span><span class=\"param\">\t<span class=\"n\">length</span><span class=\"p\">:</span> <span class=\"nb\">float</span> <span class=\"o\">=</span> <span class=\"mi\">2</span>,</span><span class=\"param\">\t<span class=\"n\">width</span><span class=\"p\">:</span> <span class=\"nb\">float</span> <span class=\"o\">=</span> <span class=\"mf\">0.1</span>,</span><span class=\"param\">\t<span class=\"n\">depth</span><span class=\"p\">:</span> <span class=\"nb\">float</span> <span class=\"o\">=</span> <span class=\"mf\">0.3</span>,</span><span class=\"param\">\t<span class=\"n\">random_color</span><span class=\"p\">:</span> <span class=\"nb\">bool</span> <span class=\"o\">=</span> <span class=\"kc\">True</span>,</span><span class=\"param\">\t<span class=\"n\">mass</span><span class=\"p\">:</span> <span class=\"nb\">float</span> <span class=\"o\">=</span> <span class=\"mi\">1</span>,</span><span class=\"param\">\t<span class=\"n\">material</span><span class=\"p\">:</span> <span class=\"n\">rostok</span><span class=\"o\">.</span><span class=\"n\">utils</span><span class=\"o\">.</span><span class=\"n\">dataset_materials</span><span class=\"o\">.</span><span class=\"n\">material_dataclass_manipulating</span><span class=\"o\">.</span><span class=\"n\">Material</span> <span class=\"o\">=</span> <span class=\"n\">DefaultChronoMaterial</span><span class=\"p\">(</span><span class=\"n\">name</span><span class=\"o\">=</span><span class=\"s1\">&#39;default&#39;</span><span class=\"p\">,</span> <span class=\"n\">type_class</span><span class=\"o\">=</span><span class=\"s1\">&#39;ChMaterialSurfaceNSC&#39;</span><span class=\"p\">)</span>,</span><span class=\"param\">\t<span class=\"n\">is_collide</span><span class=\"p\">:</span> <span class=\"nb\">bool</span> <span class=\"o\">=</span> <span class=\"kc\">True</span></span>)</span>"}, {"fullname": "rostok.block_builder.node_render.FlatChronoBody", "modulename": "rostok.block_builder.node_render", "qualname": "FlatChronoBody", "kind": "class", "doc": "<p>Class interprets node of robot flat (palm) in physic engine <code>pychrono</code>.</p>\n\n<p>Args:\n    builder (chrono.ChSystem): Arg sets the system, which hosth the body\n    length (float): Length of the robot link. Defaults to 2.\n    width (float): Width of the robot link. Defaults to 0.1.\n    depth (float): Height of the robot link. Defaults to 0.3.\n    random_color (bool, optional): Flag of the random color of the body. Defaults to True.\n    mass (float, optional): Value mass of the body box. Defaults to 1.\n    material (Material, optional): Surface material, which define contact friction and etc. Defaults to DefaultChronoMaterial.\n    is_collide (bool, optional): Flag of collision body with othe object in system. Defaults to True.</p>\n", "bases": "ChronoBody, rostok.block_builder.basic_node_block.RobotBody"}, {"fullname": "rostok.block_builder.node_render.FlatChronoBody.__init__", "modulename": "rostok.block_builder.node_render", "qualname": "FlatChronoBody.__init__", "kind": "function", "doc": "<p>Abstract class of interpretation of nodes of a robot body part in a physics engine</p>\n\n<p>Initlization adds body in system, creates input and output marker of the body and sets them. Also,it initilize object of the contact reporter</p>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"n\">builder</span>,</span><span class=\"param\">\t<span class=\"n\">length</span><span class=\"o\">=</span><span class=\"mi\">2</span>,</span><span class=\"param\">\t<span class=\"n\">width</span><span class=\"o\">=</span><span class=\"mf\">0.1</span>,</span><span class=\"param\">\t<span class=\"n\">depth</span><span class=\"o\">=</span><span class=\"mf\">0.3</span>,</span><span class=\"param\">\t<span class=\"n\">random_color</span><span class=\"o\">=</span><span class=\"kc\">True</span>,</span><span class=\"param\">\t<span class=\"n\">mass</span><span class=\"o\">=</span><span class=\"mi\">1</span>,</span><span class=\"param\">\t<span class=\"n\">material</span><span class=\"o\">=</span><span class=\"n\">DefaultChronoMaterial</span><span class=\"p\">(</span><span class=\"n\">name</span><span class=\"o\">=</span><span class=\"s1\">&#39;default&#39;</span><span class=\"p\">,</span> <span class=\"n\">type_class</span><span class=\"o\">=</span><span class=\"s1\">&#39;ChMaterialSurfaceNSC&#39;</span><span class=\"p\">)</span>,</span><span class=\"param\">\t<span class=\"n\">is_collide</span><span class=\"p\">:</span> <span class=\"nb\">bool</span> <span class=\"o\">=</span> <span class=\"kc\">True</span></span>)</span>"}, {"fullname": "rostok.block_builder.node_render.MountChronoBody", "modulename": "rostok.block_builder.node_render", "qualname": "MountChronoBody", "kind": "class", "doc": "<p>Class is interprets node of robot end limbs in physic engine <code>pychrono</code>.</p>\n\n<p>Args:\n    builder (chrono.ChSystem): Arg sets the system, which hosth the body\n    length (float): Length of the robot link. Defaults to 0.1.\n    width (float): Width of the robot link. Defaults to 0.1.\n    depth (float): Height of the robot link. Defaults to 0.3.\n    random_color (bool, optional): Flag of the random color of the body. Defaults to True.\n    mass (float, optional): Value mass of the body box. Defaults to 1.\n    material (Material, optional): Surface material, which define contact friction and etc. Defaults to DefaultChronoMaterial.\n    is_collide (bool, optional): Flag of collision body with othe object in system. Defaults to True.</p>\n", "bases": "ChronoBody, rostok.block_builder.basic_node_block.RobotBody"}, {"fullname": "rostok.block_builder.node_render.MountChronoBody.__init__", "modulename": "rostok.block_builder.node_render", "qualname": "MountChronoBody.__init__", "kind": "function", "doc": "<p>Abstract class of interpretation of nodes of a robot body part in a physics engine</p>\n\n<p>Initlization adds body in system, creates input and output marker of the body and sets them. Also,it initilize object of the contact reporter</p>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"n\">builder</span>,</span><span class=\"param\">\t<span class=\"n\">length</span><span class=\"o\">=</span><span class=\"mf\">0.1</span>,</span><span class=\"param\">\t<span class=\"n\">width</span><span class=\"o\">=</span><span class=\"mf\">0.1</span>,</span><span class=\"param\">\t<span class=\"n\">depth</span><span class=\"o\">=</span><span class=\"mf\">0.3</span>,</span><span class=\"param\">\t<span class=\"n\">random_color</span><span class=\"o\">=</span><span class=\"kc\">True</span>,</span><span class=\"param\">\t<span class=\"n\">mass</span><span class=\"o\">=</span><span class=\"mi\">1</span>,</span><span class=\"param\">\t<span class=\"n\">material</span><span class=\"o\">=</span><span class=\"n\">DefaultChronoMaterial</span><span class=\"p\">(</span><span class=\"n\">name</span><span class=\"o\">=</span><span class=\"s1\">&#39;default&#39;</span><span class=\"p\">,</span> <span class=\"n\">type_class</span><span class=\"o\">=</span><span class=\"s1\">&#39;ChMaterialSurfaceNSC&#39;</span><span class=\"p\">)</span>,</span><span class=\"param\">\t<span class=\"n\">is_collide</span><span class=\"p\">:</span> <span class=\"nb\">bool</span> <span class=\"o\">=</span> <span class=\"kc\">True</span></span>)</span>"}, {"fullname": "rostok.block_builder.node_render.ChronoBodyEnv", "modulename": "rostok.block_builder.node_render", "qualname": "ChronoBodyEnv", "kind": "class", "doc": "<p>Class of environments bodies with standard shape, like box, ellipsoid, cylinder. It adds solid body in <code>pychrono</code> physical system that is not robot part</p>\n\n<p>Args:\n    builder (chrono.ChSystem): Arg sets the system, which hosth the body\n    shape (SimpleBody): Args define the shape of the body. Defaults to SimpleBody.BOX\n    random_color (bool, optional): Flag of the random color of the body. Defaults to True.\n    mass (float, optional): Value mass of the body box. Defaults to 1.\n    material (Material, optional): Surface material, which define contact friction and etc. Defaults to DefaultChronoMaterial.\n    pos (FrameTransform): The frame define initial position and orientation .</p>\n", "bases": "ChronoBody"}, {"fullname": "rostok.block_builder.node_render.ChronoBodyEnv.__init__", "modulename": "rostok.block_builder.node_render", "qualname": "ChronoBodyEnv.__init__", "kind": "function", "doc": "<p>Abstract class of interpretation of nodes of a robot body part in a physics engine</p>\n\n<p>Initlization adds body in system, creates input and output marker of the body and sets them. Also,it initilize object of the contact reporter</p>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"n\">builder</span>,</span><span class=\"param\">\t<span class=\"n\">shape</span><span class=\"o\">=&lt;</span><span class=\"n\">SimpleBody</span><span class=\"o\">.</span><span class=\"n\">BOX</span><span class=\"p\">:</span> <span class=\"n\">BoxSize</span><span class=\"p\">(</span><span class=\"n\">width</span><span class=\"o\">=</span><span class=\"mf\">0.1</span><span class=\"p\">,</span> <span class=\"n\">length</span><span class=\"o\">=</span><span class=\"mf\">0.2</span><span class=\"p\">,</span> <span class=\"n\">height</span><span class=\"o\">=</span><span class=\"mf\">0.3</span><span class=\"p\">)</span><span class=\"o\">&gt;</span>,</span><span class=\"param\">\t<span class=\"n\">random_color</span><span class=\"o\">=</span><span class=\"kc\">True</span>,</span><span class=\"param\">\t<span class=\"n\">mass</span><span class=\"o\">=</span><span class=\"mi\">1</span>,</span><span class=\"param\">\t<span class=\"n\">material</span><span class=\"o\">=</span><span class=\"n\">DefaultChronoMaterial</span><span class=\"p\">(</span><span class=\"n\">name</span><span class=\"o\">=</span><span class=\"s1\">&#39;default&#39;</span><span class=\"p\">,</span> <span class=\"n\">type_class</span><span class=\"o\">=</span><span class=\"s1\">&#39;ChMaterialSurfaceNSC&#39;</span><span class=\"p\">)</span>,</span><span class=\"param\">\t<span class=\"n\">pos</span><span class=\"p\">:</span> <span class=\"n\">rostok</span><span class=\"o\">.</span><span class=\"n\">block_builder</span><span class=\"o\">.</span><span class=\"n\">transform_srtucture</span><span class=\"o\">.</span><span class=\"n\">FrameTransform</span> <span class=\"o\">=</span> <span class=\"n\">FrameTransform</span><span class=\"p\">(</span><span class=\"n\">position</span><span class=\"o\">=</span><span class=\"p\">[</span><span class=\"mi\">0</span><span class=\"p\">,</span> <span class=\"mf\">0.0</span><span class=\"p\">,</span> <span class=\"mi\">0</span><span class=\"p\">],</span> <span class=\"n\">rotation</span><span class=\"o\">=</span><span class=\"p\">[</span><span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"mi\">0</span><span class=\"p\">,</span> <span class=\"mi\">0</span><span class=\"p\">,</span> <span class=\"mi\">0</span><span class=\"p\">])</span></span>)</span>"}, {"fullname": "rostok.block_builder.node_render.ChronoBodyEnv.set_coord", "modulename": "rostok.block_builder.node_render", "qualname": "ChronoBodyEnv.set_coord", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">frame</span><span class=\"p\">:</span> <span class=\"n\">rostok</span><span class=\"o\">.</span><span class=\"n\">block_builder</span><span class=\"o\">.</span><span class=\"n\">transform_srtucture</span><span class=\"o\">.</span><span class=\"n\">FrameTransform</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "rostok.block_builder.node_render.ChronoRevolveJoint", "modulename": "rostok.block_builder.node_render", "qualname": "ChronoRevolveJoint", "kind": "class", "doc": "<p>The class representing revolute joint object in <code>pychrono</code> physical engine. It is the embodiment of joint nodes from the mechanism graph in simulation</p>\n\n<p>Args:\n    builder (pychrono.ChSystem): Arg sets the system, which hosth the body\n    axis (Axis, optional): Define rotation axis. Defaults to Axis.Z.\n    type_of_input (InputType, optional): Define type of input joint control. Defaults to InputType.POSITION. Instead of, can changes to torque, that more realistic.\n    stiffness (float, optional): Optional arg add a spring with <code>stiffness</code> to joint. Defaults to 0.\n    damping (float, optional): Optional arg add a dempher to joint. Defaults to 0.\n    equilibrium_position (float, optional): Define equilibrium position of the spring. Defaults to 0.</p>\n\n<p>Attributes:\n    joint (pychrono.ChLink): Joint define nodes of the joint part in the system\n    axis (Axis): The axis of the rotation\n    input_type (InputType): The type of input</p>\n", "bases": "rostok.block_builder.basic_node_block.BlockBridge"}, {"fullname": "rostok.block_builder.node_render.ChronoRevolveJoint.__init__", "modulename": "rostok.block_builder.node_render", "qualname": "ChronoRevolveJoint.__init__", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"n\">builder</span><span class=\"p\">:</span> <span class=\"n\">pychrono</span><span class=\"o\">.</span><span class=\"n\">core</span><span class=\"o\">.</span><span class=\"n\">ChSystem</span>,</span><span class=\"param\">\t<span class=\"n\">axis</span><span class=\"p\">:</span> <span class=\"n\">rostok</span><span class=\"o\">.</span><span class=\"n\">block_builder</span><span class=\"o\">.</span><span class=\"n\">node_render</span><span class=\"o\">.</span><span class=\"n\">ChronoRevolveJoint</span><span class=\"o\">.</span><span class=\"n\">Axis</span> <span class=\"o\">=</span> <span class=\"o\">&lt;</span><span class=\"n\">Axis</span><span class=\"o\">.</span><span class=\"n\">Z</span><span class=\"p\">:</span> <span class=\"s1\">&#39;[ 1, 0, 0, 0 ]&#39;</span><span class=\"o\">&gt;</span>,</span><span class=\"param\">\t<span class=\"n\">type_of_input</span><span class=\"p\">:</span> <span class=\"n\">rostok</span><span class=\"o\">.</span><span class=\"n\">block_builder</span><span class=\"o\">.</span><span class=\"n\">node_render</span><span class=\"o\">.</span><span class=\"n\">ChronoRevolveJoint</span><span class=\"o\">.</span><span class=\"n\">InputType</span> <span class=\"o\">=</span> <span class=\"o\">&lt;</span><span class=\"n\">InputType</span><span class=\"o\">.</span><span class=\"n\">POSITION</span><span class=\"p\">:</span> <span class=\"s2\">&quot;{&#39;Name&#39;: &#39;Angle&#39;, &#39;TypeMotor&#39;: &lt;class &#39;pychrono.core.ChLinkMotorRotationAngle&#39;&gt;}&quot;</span><span class=\"o\">&gt;</span>,</span><span class=\"param\">\t<span class=\"n\">stiffness</span><span class=\"p\">:</span> <span class=\"nb\">float</span> <span class=\"o\">=</span> <span class=\"mf\">0.0</span>,</span><span class=\"param\">\t<span class=\"n\">damping</span><span class=\"p\">:</span> <span class=\"nb\">float</span> <span class=\"o\">=</span> <span class=\"mf\">0.0</span>,</span><span class=\"param\">\t<span class=\"n\">equilibrium_position</span><span class=\"p\">:</span> <span class=\"nb\">float</span> <span class=\"o\">=</span> <span class=\"mf\">0.0</span></span>)</span>"}, {"fullname": "rostok.block_builder.node_render.ChronoRevolveJoint.InputType", "modulename": "rostok.block_builder.node_render", "qualname": "ChronoRevolveJoint.InputType", "kind": "class", "doc": "<p>An enumeration.</p>\n", "bases": "builtins.str, enum.Enum"}, {"fullname": "rostok.block_builder.node_render.ChronoRevolveJoint.InputType.TORQUE", "modulename": "rostok.block_builder.node_render", "qualname": "ChronoRevolveJoint.InputType.TORQUE", "kind": "variable", "doc": "<p></p>\n", "default_value": " = &lt;InputType.TORQUE: &quot;{&#x27;Name&#x27;: &#x27;Torque&#x27;, &#x27;TypeMotor&#x27;: &lt;class &#x27;pychrono.core.ChLinkMotorRotationTorque&#x27;&gt;}&quot;&gt;"}, {"fullname": "rostok.block_builder.node_render.ChronoRevolveJoint.InputType.VELOCITY", "modulename": "rostok.block_builder.node_render", "qualname": "ChronoRevolveJoint.InputType.VELOCITY", "kind": "variable", "doc": "<p></p>\n", "default_value": " = &lt;InputType.VELOCITY: &quot;{&#x27;Name&#x27;: &#x27;Speed&#x27;, &#x27;TypeMotor&#x27;: &lt;class &#x27;pychrono.core.ChLinkMotorRotationSpeed&#x27;&gt;}&quot;&gt;"}, {"fullname": "rostok.block_builder.node_render.ChronoRevolveJoint.InputType.POSITION", "modulename": "rostok.block_builder.node_render", "qualname": "ChronoRevolveJoint.InputType.POSITION", "kind": "variable", "doc": "<p></p>\n", "default_value": " = &lt;InputType.POSITION: &quot;{&#x27;Name&#x27;: &#x27;Angle&#x27;, &#x27;TypeMotor&#x27;: &lt;class &#x27;pychrono.core.ChLinkMotorRotationAngle&#x27;&gt;}&quot;&gt;"}, {"fullname": "rostok.block_builder.node_render.ChronoRevolveJoint.InputType.UNCONTROL", "modulename": "rostok.block_builder.node_render", "qualname": "ChronoRevolveJoint.InputType.UNCONTROL", "kind": "variable", "doc": "<p></p>\n", "default_value": " = &lt;InputType.UNCONTROL: &quot;{&#x27;Name&#x27;: &#x27;Uncontrol&#x27;, &#x27;TypeMotor&#x27;: &lt;class &#x27;pychrono.core.ChLinkRevolute&#x27;&gt;}&quot;&gt;"}, {"fullname": "rostok.block_builder.node_render.ChronoRevolveJoint.Axis", "modulename": "rostok.block_builder.node_render", "qualname": "ChronoRevolveJoint.Axis", "kind": "class", "doc": "<p>An enumeration.</p>\n", "bases": "builtins.str, enum.Enum"}, {"fullname": "rostok.block_builder.node_render.ChronoRevolveJoint.Axis.Z", "modulename": "rostok.block_builder.node_render", "qualname": "ChronoRevolveJoint.Axis.Z", "kind": "variable", "doc": "<p></p>\n", "default_value": " = &lt;Axis.Z: &#x27;[ 1, 0, 0, 0 ]&#x27;&gt;"}, {"fullname": "rostok.block_builder.node_render.ChronoRevolveJoint.Axis.Y", "modulename": "rostok.block_builder.node_render", "qualname": "ChronoRevolveJoint.Axis.Y", "kind": "variable", "doc": "<p></p>\n", "default_value": " = &lt;Axis.Y: &#x27;[ 0.707107, -0.707107, 0, 0 ]&#x27;&gt;"}, {"fullname": "rostok.block_builder.node_render.ChronoRevolveJoint.Axis.X", "modulename": "rostok.block_builder.node_render", "qualname": "ChronoRevolveJoint.Axis.X", "kind": "variable", "doc": "<p></p>\n", "default_value": " = &lt;Axis.X: &#x27;[ 0.707107, 0, 0.707107, 0 ]&#x27;&gt;"}, {"fullname": "rostok.block_builder.node_render.ChronoRevolveJoint.connect", "modulename": "rostok.block_builder.node_render", "qualname": "ChronoRevolveJoint.connect", "kind": "function", "doc": "<p>Joint is connected two bodies</p>\n\n<p>If we have two not initialize joints engine crash</p>\n\n<p>Args:\n    in_block (ChronoBody): Slave body to connect\n    out_block (ChronoBody): Master body to connect</p>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"bp\">self</span>,</span><span class=\"param\">\t<span class=\"n\">in_block</span><span class=\"p\">:</span> <span class=\"n\">rostok</span><span class=\"o\">.</span><span class=\"n\">block_builder</span><span class=\"o\">.</span><span class=\"n\">node_render</span><span class=\"o\">.</span><span class=\"n\">ChronoBody</span>,</span><span class=\"param\">\t<span class=\"n\">out_block</span><span class=\"p\">:</span> <span class=\"n\">rostok</span><span class=\"o\">.</span><span class=\"n\">block_builder</span><span class=\"o\">.</span><span class=\"n\">node_render</span><span class=\"o\">.</span><span class=\"n\">ChronoBody</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "rostok.block_builder.node_render.ChronoRevolveJoint.apply_transform", "modulename": "rostok.block_builder.node_render", "qualname": "ChronoRevolveJoint.apply_transform", "kind": "function", "doc": "<p>Aplied input tranformation to the output frame of the body</p>\n\n<p>Args:\n    in_block (BlockTransform): The block which define transormations</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">in_block</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "rostok.block_builder.node_render.ChronoTransform", "modulename": "rostok.block_builder.node_render", "qualname": "ChronoTransform", "kind": "class", "doc": "<p>Class representing node of the transformation in <code>pychrono</code> physical engine</p>\n\n<p>Args:\n    builder (pychrono.ChSystem): Arg sets the system, which hosth the body\n    transform (FrameTransform): Define tranformation of the instance</p>\n", "bases": "rostok.block_builder.basic_node_block.BlockTransform"}, {"fullname": "rostok.block_builder.node_render.ChronoTransform.__init__", "modulename": "rostok.block_builder.node_render", "qualname": "ChronoTransform.__init__", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">builder</span><span class=\"p\">:</span> <span class=\"n\">pychrono</span><span class=\"o\">.</span><span class=\"n\">core</span><span class=\"o\">.</span><span class=\"n\">ChSystem</span>, </span><span class=\"param\"><span class=\"n\">transform</span></span>)</span>"}, {"fullname": "rostok.block_builder.node_render.find_body_from_two_previous_blocks", "modulename": "rostok.block_builder.node_render", "qualname": "find_body_from_two_previous_blocks", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"n\">sequence</span><span class=\"p\">:</span> <span class=\"nb\">list</span><span class=\"p\">[</span><span class=\"n\">rostok</span><span class=\"o\">.</span><span class=\"n\">block_builder</span><span class=\"o\">.</span><span class=\"n\">basic_node_block</span><span class=\"o\">.</span><span class=\"n\">Block</span><span class=\"p\">]</span>,</span><span class=\"param\">\t<span class=\"n\">it</span><span class=\"p\">:</span> <span class=\"nb\">int</span></span><span class=\"return-annotation\">) -> <span class=\"n\">Optional</span><span class=\"p\">[</span><span class=\"n\">rostok</span><span class=\"o\">.</span><span class=\"n\">block_builder</span><span class=\"o\">.</span><span class=\"n\">basic_node_block</span><span class=\"o\">.</span><span class=\"n\">Block</span><span class=\"p\">]</span>:</span></span>", "funcdef": "def"}, {"fullname": "rostok.block_builder.node_render.find_body_from_two_after_blocks", "modulename": "rostok.block_builder.node_render", "qualname": "find_body_from_two_after_blocks", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"n\">sequence</span><span class=\"p\">:</span> <span class=\"nb\">list</span><span class=\"p\">[</span><span class=\"n\">rostok</span><span class=\"o\">.</span><span class=\"n\">block_builder</span><span class=\"o\">.</span><span class=\"n\">basic_node_block</span><span class=\"o\">.</span><span class=\"n\">Block</span><span class=\"p\">]</span>,</span><span class=\"param\">\t<span class=\"n\">it</span><span class=\"p\">:</span> <span class=\"nb\">int</span></span><span class=\"return-annotation\">) -> <span class=\"n\">Optional</span><span class=\"p\">[</span><span class=\"n\">rostok</span><span class=\"o\">.</span><span class=\"n\">block_builder</span><span class=\"o\">.</span><span class=\"n\">basic_node_block</span><span class=\"o\">.</span><span class=\"n\">Block</span><span class=\"p\">]</span>:</span></span>", "funcdef": "def"}, {"fullname": "rostok.block_builder.node_render.connect_blocks", "modulename": "rostok.block_builder.node_render", "qualname": "connect_blocks", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">sequence</span><span class=\"p\">:</span> <span class=\"nb\">list</span><span class=\"p\">[</span><span class=\"n\">rostok</span><span class=\"o\">.</span><span class=\"n\">block_builder</span><span class=\"o\">.</span><span class=\"n\">basic_node_block</span><span class=\"o\">.</span><span class=\"n\">Block</span><span class=\"p\">]</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "rostok.block_builder.transform_srtucture", "modulename": "rostok.block_builder.transform_srtucture", "kind": "module", "doc": "<p></p>\n"}, {"fullname": "rostok.block_builder.transform_srtucture.FrameTransform", "modulename": "rostok.block_builder.transform_srtucture", "qualname": "FrameTransform", "kind": "class", "doc": "<p>FrameTransform(position, rotation)</p>\n", "bases": "builtins.tuple"}, {"fullname": "rostok.block_builder.transform_srtucture.FrameTransform.__init__", "modulename": "rostok.block_builder.transform_srtucture", "qualname": "FrameTransform.__init__", "kind": "function", "doc": "<p>Create new instance of FrameTransform(position, rotation)</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">position</span>, </span><span class=\"param\"><span class=\"n\">rotation</span></span>)</span>"}, {"fullname": "rostok.block_builder.transform_srtucture.FrameTransform.position", "modulename": "rostok.block_builder.transform_srtucture", "qualname": "FrameTransform.position", "kind": "variable", "doc": "<p>Alias for field number 0</p>\n"}, {"fullname": "rostok.block_builder.transform_srtucture.FrameTransform.rotation", "modulename": "rostok.block_builder.transform_srtucture", "qualname": "FrameTransform.rotation", "kind": "variable", "doc": "<p>Alias for field number 1</p>\n"}, {"fullname": "rostok.criterion", "modulename": "rostok.criterion", "kind": "module", "doc": "<p></p>\n"}, {"fullname": "rostok.criterion.criterion_calc", "modulename": "rostok.criterion.criterion_calc", "kind": "module", "doc": "<p></p>\n"}, {"fullname": "rostok.criterion.criterion_calc.appV2L", "modulename": "rostok.criterion.criterion_calc", "qualname": "appV2L", "kind": "function", "doc": "<p>Function to append value of the list \"val\" to list \"final\"\nArgs:\n    final (list): list of the lists\n    val (list): list of the values</p>\n\n<p>Returns:\n    final (list)</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">final</span><span class=\"p\">:</span> <span class=\"nb\">list</span>, </span><span class=\"param\"><span class=\"n\">val</span><span class=\"p\">:</span> <span class=\"nb\">list</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "rostok.criterion.criterion_calc.criterion_calc", "modulename": "rostok.criterion.criterion_calc", "qualname": "criterion_calc", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">sim_output</span>, </span><span class=\"param\"><span class=\"n\">B</span>, </span><span class=\"param\"><span class=\"n\">J</span>, </span><span class=\"param\"><span class=\"n\">LB</span>, </span><span class=\"param\"><span class=\"n\">RB</span>, </span><span class=\"param\"><span class=\"n\">W</span>, </span><span class=\"param\"><span class=\"n\">gait</span></span><span class=\"return-annotation\">) -> <span class=\"nb\">float</span>:</span></span>", "funcdef": "def"}, {"fullname": "rostok.criterion.flags_simualtions", "modulename": "rostok.criterion.flags_simualtions", "kind": "module", "doc": "<p></p>\n"}, {"fullname": "rostok.criterion.flags_simualtions.BuilderNotInitializedError", "modulename": "rostok.criterion.flags_simualtions", "qualname": "BuilderNotInitializedError", "kind": "class", "doc": "<p>Common base class for all non-exit exceptions.</p>\n", "bases": "builtins.Exception"}, {"fullname": "rostok.criterion.flags_simualtions.BuilderNotInitializedError.__init__", "modulename": "rostok.criterion.flags_simualtions", "qualname": "BuilderNotInitializedError.__init__", "kind": "function", "doc": "<p>Exception raised when the builder is not initialized</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"o\">*</span><span class=\"n\">args</span></span>)</span>"}, {"fullname": "rostok.criterion.flags_simualtions.FlagStopSimualtions", "modulename": "rostok.criterion.flags_simualtions", "qualname": "FlagStopSimualtions", "kind": "class", "doc": "<p>Abstract class for stopping flags</p>\n", "bases": "abc.ABC"}, {"fullname": "rostok.criterion.flags_simualtions.FlagStopSimualtions.__init__", "modulename": "rostok.criterion.flags_simualtions", "qualname": "FlagStopSimualtions.__init__", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">()</span>"}, {"fullname": "rostok.criterion.flags_simualtions.FlagStopSimualtions.build", "modulename": "rostok.criterion.flags_simualtions", "qualname": "FlagStopSimualtions.build", "kind": "function", "doc": "<p>Build flag on the chrono system, robot and object</p>\n\n<p>Args:\n    chrono_system (chrono.ChSystem): chrono system to build\n    in_robot (robot.Robot): robot to build\n    obj (chrono.ChBody): object to build</p>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"bp\">self</span>,</span><span class=\"param\">\t<span class=\"n\">chrono_system</span><span class=\"p\">:</span> <span class=\"n\">pychrono</span><span class=\"o\">.</span><span class=\"n\">core</span><span class=\"o\">.</span><span class=\"n\">ChSystem</span>,</span><span class=\"param\">\t<span class=\"n\">in_robot</span><span class=\"p\">:</span> <span class=\"n\">rostok</span><span class=\"o\">.</span><span class=\"n\">virtual_experiment</span><span class=\"o\">.</span><span class=\"n\">robot</span><span class=\"o\">.</span><span class=\"n\">Robot</span>,</span><span class=\"param\">\t<span class=\"n\">obj</span><span class=\"p\">:</span> <span class=\"n\">pychrono</span><span class=\"o\">.</span><span class=\"n\">core</span><span class=\"o\">.</span><span class=\"n\">ChBody</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "rostok.criterion.flags_simualtions.FlagStopSimualtions.get_flag_state", "modulename": "rostok.criterion.flags_simualtions", "qualname": "FlagStopSimualtions.get_flag_state", "kind": "function", "doc": "<p>Getter flag state</p>\n\n<p>Returns:\n    bool: Current state of flag</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "rostok.criterion.flags_simualtions.FlagMaxTime", "modulename": "rostok.criterion.flags_simualtions", "qualname": "FlagMaxTime", "kind": "class", "doc": "<p>Flag to stop simulation in case of maximum time</p>\n\n<p>Args:\n    max_time_simulation (float):Max seconds simulation</p>\n", "bases": "FlagStopSimualtions"}, {"fullname": "rostok.criterion.flags_simualtions.FlagMaxTime.__init__", "modulename": "rostok.criterion.flags_simualtions", "qualname": "FlagMaxTime.__init__", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">max_time_simulation</span></span>)</span>"}, {"fullname": "rostok.criterion.flags_simualtions.FlagMaxTime.get_flag_state", "modulename": "rostok.criterion.flags_simualtions", "qualname": "FlagMaxTime.get_flag_state", "kind": "function", "doc": "<p>Getter flag state</p>\n\n<p>Returns:\n    bool: Current state of flag</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "rostok.criterion.flags_simualtions.FlagWithContact", "modulename": "rostok.criterion.flags_simualtions", "qualname": "FlagWithContact", "kind": "class", "doc": "<p>Abstract class of stop flag simulation base on contact with bodies</p>\n", "bases": "FlagStopSimualtions, abc.ABC"}, {"fullname": "rostok.criterion.flags_simualtions.FlagWithContact.__init__", "modulename": "rostok.criterion.flags_simualtions", "qualname": "FlagWithContact.__init__", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">()</span>"}, {"fullname": "rostok.criterion.flags_simualtions.FlagWithContact.get_flag_state", "modulename": "rostok.criterion.flags_simualtions", "qualname": "FlagWithContact.get_flag_state", "kind": "function", "doc": "<p>Getter flag state</p>\n\n<p>Returns:\n    bool: Current state of flag</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "rostok.criterion.flags_simualtions.FlagWithContact.is_contact", "modulename": "rostok.criterion.flags_simualtions", "qualname": "FlagWithContact.is_contact", "kind": "function", "doc": "<p>Check state of contact bodies</p>\n\n<p>Returns:\n    bool: True when contact is exsist</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "rostok.criterion.flags_simualtions.FlagSlipout", "modulename": "rostok.criterion.flags_simualtions", "qualname": "FlagSlipout", "kind": "class", "doc": "<p>Class stop flag chrono simulation when an object slips out</p>\n\n<p>Args:\n    time_to_contact (float): Max time from start simulation to contact. Defaults to 3..\n    time_without_contact (float): Max time without contact. Defaults to 0.2.</p>\n", "bases": "FlagWithContact"}, {"fullname": "rostok.criterion.flags_simualtions.FlagSlipout.__init__", "modulename": "rostok.criterion.flags_simualtions", "qualname": "FlagSlipout.__init__", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">time_to_contact</span><span class=\"p\">:</span> <span class=\"nb\">float</span> <span class=\"o\">=</span> <span class=\"mf\">3.0</span>, </span><span class=\"param\"><span class=\"n\">time_without_contact</span><span class=\"p\">:</span> <span class=\"nb\">float</span> <span class=\"o\">=</span> <span class=\"mf\">0.2</span></span>)</span>"}, {"fullname": "rostok.criterion.flags_simualtions.FlagSlipout.get_flag_state", "modulename": "rostok.criterion.flags_simualtions", "qualname": "FlagSlipout.get_flag_state", "kind": "function", "doc": "<p>Getter flag state</p>\n\n<p>Returns:\n    bool: Current state of flag</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "rostok.criterion.flags_simualtions.FlagNotContact", "modulename": "rostok.criterion.flags_simualtions", "qualname": "FlagNotContact", "kind": "class", "doc": "<p>Flag to stop chrono-modeling when the maximum time without contact from start is reached</p>\n\n<p>Args:\n    time_to_contact (float): Max time without contact. Defaults to 3..</p>\n", "bases": "FlagWithContact"}, {"fullname": "rostok.criterion.flags_simualtions.FlagNotContact.__init__", "modulename": "rostok.criterion.flags_simualtions", "qualname": "FlagNotContact.__init__", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">time_to_contact</span><span class=\"p\">:</span> <span class=\"nb\">float</span> <span class=\"o\">=</span> <span class=\"mf\">3.0</span></span>)</span>"}, {"fullname": "rostok.criterion.flags_simualtions.FlagNotContact.get_flag_state", "modulename": "rostok.criterion.flags_simualtions", "qualname": "FlagNotContact.get_flag_state", "kind": "function", "doc": "<p>Getter flag state</p>\n\n<p>Returns:\n    bool: Current state of flag</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "rostok.criterion.flags_simualtions.ConditionStopSimulation", "modulename": "rostok.criterion.flags_simualtions", "qualname": "ConditionStopSimulation", "kind": "class", "doc": "<p>A class of flag-based chrono-modeling stopping conditions. </p>\n\n<p>Args:\n    chrono_system (chrono.ChSystem): System which checking on condition\n    in_robot (robot.Robot): Robot which checking on condition_description_\n    obj (chrono.ChBody): Object which checking on condition_description_\n    flags (list[FlagStopSimualtions]): Flag of the stopping simulation</p>\n"}, {"fullname": "rostok.criterion.flags_simualtions.ConditionStopSimulation.__init__", "modulename": "rostok.criterion.flags_simualtions", "qualname": "ConditionStopSimulation.__init__", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"n\">chrono_system</span><span class=\"p\">:</span> <span class=\"n\">pychrono</span><span class=\"o\">.</span><span class=\"n\">core</span><span class=\"o\">.</span><span class=\"n\">ChSystem</span>,</span><span class=\"param\">\t<span class=\"n\">in_robot</span><span class=\"p\">:</span> <span class=\"n\">rostok</span><span class=\"o\">.</span><span class=\"n\">virtual_experiment</span><span class=\"o\">.</span><span class=\"n\">robot</span><span class=\"o\">.</span><span class=\"n\">Robot</span>,</span><span class=\"param\">\t<span class=\"n\">obj</span><span class=\"p\">:</span> <span class=\"n\">pychrono</span><span class=\"o\">.</span><span class=\"n\">core</span><span class=\"o\">.</span><span class=\"n\">ChBody</span>,</span><span class=\"param\">\t<span class=\"n\">flags</span><span class=\"p\">:</span> <span class=\"nb\">list</span><span class=\"p\">[</span><span class=\"n\">rostok</span><span class=\"o\">.</span><span class=\"n\">criterion</span><span class=\"o\">.</span><span class=\"n\">flags_simualtions</span><span class=\"o\">.</span><span class=\"n\">FlagStopSimualtions</span><span class=\"p\">]</span></span>)</span>"}, {"fullname": "rostok.criterion.flags_simualtions.ConditionStopSimulation.flag_stop_simulation", "modulename": "rostok.criterion.flags_simualtions", "qualname": "ConditionStopSimulation.flag_stop_simulation", "kind": "function", "doc": "<p>\u0421ondition of stop simulation</p>\n\n<p>Returns:\n    bool: True if simulation have to be stopped</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "rostok.graph_generators", "modulename": "rostok.graph_generators", "kind": "module", "doc": "<p></p>\n"}, {"fullname": "rostok.graph_generators.graph_environment", "modulename": "rostok.graph_generators.graph_environment", "kind": "module", "doc": "<p></p>\n"}, {"fullname": "rostok.graph_generators.graph_environment.rule_is_terminal", "modulename": "rostok.graph_generators.graph_environment", "qualname": "rule_is_terminal", "kind": "function", "doc": "<p>Function finding non terminal rules </p>\n\n<p>Args:\n    rule (Rule): Input rule to checking</p>\n\n<p>Returns:\n    int: amount of terminal nodes in rule</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">rule</span><span class=\"p\">:</span> <span class=\"n\">rostok</span><span class=\"o\">.</span><span class=\"n\">graph_grammar</span><span class=\"o\">.</span><span class=\"n\">node</span><span class=\"o\">.</span><span class=\"n\">Rule</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "rostok.graph_generators.graph_environment.RuleAction", "modulename": "rostok.graph_generators.graph_environment", "qualname": "RuleAction", "kind": "class", "doc": "<p></p>\n"}, {"fullname": "rostok.graph_generators.graph_environment.RuleAction.__init__", "modulename": "rostok.graph_generators.graph_environment", "qualname": "RuleAction.__init__", "kind": "function", "doc": "<p>Class action like rule grammar</p>\n\n<p>Args:\n    rule (Rule): The rule defines action</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">rule</span></span>)</span>"}, {"fullname": "rostok.graph_generators.graph_environment.RuleAction.get_replaced_node", "modulename": "rostok.graph_generators.graph_environment", "qualname": "RuleAction.get_replaced_node", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "rostok.graph_generators.graph_environment.RuleAction.is_terminal", "modulename": "rostok.graph_generators.graph_environment", "qualname": "RuleAction.is_terminal", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "rostok.graph_generators.graph_environment.GraphEnvironment", "modulename": "rostok.graph_generators.graph_environment", "qualname": "GraphEnvironment", "kind": "class", "doc": "<p></p>\n"}, {"fullname": "rostok.graph_generators.graph_environment.GraphEnvironment.__init__", "modulename": "rostok.graph_generators.graph_environment", "qualname": "GraphEnvironment.__init__", "kind": "function", "doc": "<p>Class of \"environment\" of graph grammar </p>\n\n<p>Args:\n    initilize_graph (GraphGrammar): Initial state of the graph\n    rules (list[Rule]): List of rules \n    max_numbers_rules_non_terminal (int): Max amount of non-terminal rules. Defaults to 20.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">initilize_graph</span>, </span><span class=\"param\"><span class=\"n\">rules</span>, </span><span class=\"param\"><span class=\"n\">max_numbers_rules_non_terminal</span><span class=\"o\">=</span><span class=\"mi\">20</span></span>)</span>"}, {"fullname": "rostok.graph_generators.graph_environment.GraphEnvironment.getCurrentPlayer", "modulename": "rostok.graph_generators.graph_environment", "qualname": "GraphEnvironment.getCurrentPlayer", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "rostok.graph_generators.graph_environment.GraphEnvironment.getPossibleActions", "modulename": "rostok.graph_generators.graph_environment", "qualname": "GraphEnvironment.getPossibleActions", "kind": "function", "doc": "<p>Getter possible actions for current state</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "rostok.graph_generators.graph_environment.GraphEnvironment.takeAction", "modulename": "rostok.graph_generators.graph_environment", "qualname": "GraphEnvironment.takeAction", "kind": "function", "doc": "<p>Take action and return new state environment</p>\n\n<p>Args:\n    action (RuleAction): Action to take</p>\n\n<p>Returns:\n    GraphEnvironment: New state environment after action taken</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">action</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "rostok.graph_generators.graph_environment.GraphEnvironment.isTerminal", "modulename": "rostok.graph_generators.graph_environment", "qualname": "GraphEnvironment.isTerminal", "kind": "function", "doc": "<p>Condition on terminal graph</p>\n\n<p>Returns:\n    bool: State graph is terminal</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "rostok.graph_generators.graph_environment.GraphEnvironment.getReward", "modulename": "rostok.graph_generators.graph_environment", "qualname": "GraphEnvironment.getReward", "kind": "function", "doc": "<p>Reward in number (3) of nodes graph mechanism</p>\n\n<p>Returns:\n    float: Reward of terminal state graph</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "rostok.graph_generators.graph_environment.GraphEnvironment.step", "modulename": "rostok.graph_generators.graph_environment", "qualname": "GraphEnvironment.step", "kind": "function", "doc": "<p>Move current environment to new state</p>\n\n<p>Args:\n    action (RuleAction): Action is take\n    render (bool): Turn on render each step. Defaults to False.</p>\n\n<p>Returns:\n    bool, GraphGrammar: Return state of graph. If it is terminal then finish generate graph and new state graph.</p>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"bp\">self</span>,</span><span class=\"param\">\t<span class=\"n\">action</span><span class=\"p\">:</span> <span class=\"n\">rostok</span><span class=\"o\">.</span><span class=\"n\">graph_generators</span><span class=\"o\">.</span><span class=\"n\">graph_environment</span><span class=\"o\">.</span><span class=\"n\">RuleAction</span>,</span><span class=\"param\">\t<span class=\"n\">render</span><span class=\"o\">=</span><span class=\"kc\">False</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "rostok.graph_generators.graph_environment.GraphEnvironment.reset", "modulename": "rostok.graph_generators.graph_environment", "qualname": "GraphEnvironment.reset", "kind": "function", "doc": "<p>Reset environment (experimental version)</p>\n\n<p>Args:\n    new_rules (list[Rule]): Replace on new rules. Defaults to None.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">new_rules</span><span class=\"o\">=</span><span class=\"kc\">None</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "rostok.graph_generators.graph_environment.GraphVocabularyEnvironment", "modulename": "rostok.graph_generators.graph_environment", "qualname": "GraphVocabularyEnvironment", "kind": "class", "doc": "<p></p>\n", "bases": "GraphEnvironment"}, {"fullname": "rostok.graph_generators.graph_environment.GraphVocabularyEnvironment.__init__", "modulename": "rostok.graph_generators.graph_environment", "qualname": "GraphVocabularyEnvironment.__init__", "kind": "function", "doc": "<p>Subclass graph environment on rule vocabulary instead rules and with real reward on simulation and control optimizing</p>\n\n<p>Args:\n    initilize_graph (GraphGrammar): Initial state of the graph\n    rule_vocabulary (RuleVocabulary): Object of the rule vocabulary for manipulation on graph \n    max_numbers_rules_non_terminal (int): Max amount of non-terminal rules. Defaults to 20.</p>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"n\">initilize_graph</span><span class=\"p\">:</span> <span class=\"n\">rostok</span><span class=\"o\">.</span><span class=\"n\">graph_grammar</span><span class=\"o\">.</span><span class=\"n\">node</span><span class=\"o\">.</span><span class=\"n\">GraphGrammar</span>,</span><span class=\"param\">\t<span class=\"n\">rule_vocabulary</span><span class=\"p\">:</span> <span class=\"n\">rostok</span><span class=\"o\">.</span><span class=\"n\">graph_grammar</span><span class=\"o\">.</span><span class=\"n\">rule_vocabulary</span><span class=\"o\">.</span><span class=\"n\">RuleVocabulary</span>,</span><span class=\"param\">\t<span class=\"n\">max_numbers_rules_non_terminal</span><span class=\"o\">=</span><span class=\"mi\">20</span></span>)</span>"}, {"fullname": "rostok.graph_generators.graph_environment.GraphVocabularyEnvironment.getPossibleActions", "modulename": "rostok.graph_generators.graph_environment", "qualname": "GraphVocabularyEnvironment.getPossibleActions", "kind": "function", "doc": "<p>Getter possible actions for current state</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "rostok.graph_generators.graph_environment.GraphVocabularyEnvironment.getReward", "modulename": "rostok.graph_generators.graph_environment", "qualname": "GraphVocabularyEnvironment.getReward", "kind": "function", "doc": "<p>Reward in number (3) of nodes graph mechanism</p>\n\n<p>Returns:\n    float: Reward of terminal state graph</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "rostok.graph_generators.graph_environment.GraphVocabularyEnvironment.takeAction", "modulename": "rostok.graph_generators.graph_environment", "qualname": "GraphVocabularyEnvironment.takeAction", "kind": "function", "doc": "<p>Take action and return new state environment</p>\n\n<p>Args:\n    action (RuleAction): Action to take</p>\n\n<p>Returns:\n    GraphEnvironment: New state environment after action taken</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">action</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "rostok.graph_generators.graph_environment.GraphVocabularyEnvironment.set_control_optimizer", "modulename": "rostok.graph_generators.graph_environment", "qualname": "GraphVocabularyEnvironment.set_control_optimizer", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"bp\">self</span>,</span><span class=\"param\">\t<span class=\"n\">control_optimizer</span><span class=\"p\">:</span> <span class=\"n\">rostok</span><span class=\"o\">.</span><span class=\"n\">trajectory_optimizer</span><span class=\"o\">.</span><span class=\"n\">control_optimizer</span><span class=\"o\">.</span><span class=\"n\">ControlOptimizer</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "rostok.graph_generators.graph_environment.GraphVocabularyEnvironment.step", "modulename": "rostok.graph_generators.graph_environment", "qualname": "GraphVocabularyEnvironment.step", "kind": "function", "doc": "<p>Move current environment to new state</p>\n\n<p>Args:\n    action (RuleAction): Action is take\n    render (bool): Turn on render each step. Defaults to False.</p>\n\n<p>Returns:\n    bool, GraphGrammar: Return state of graph. If it is terminal then finish generate graph and new state graph.</p>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"bp\">self</span>,</span><span class=\"param\">\t<span class=\"n\">action</span><span class=\"p\">:</span> <span class=\"n\">rostok</span><span class=\"o\">.</span><span class=\"n\">graph_generators</span><span class=\"o\">.</span><span class=\"n\">graph_environment</span><span class=\"o\">.</span><span class=\"n\">RuleAction</span>,</span><span class=\"param\">\t<span class=\"n\">render</span><span class=\"o\">=</span><span class=\"kc\">False</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "rostok.graph_generators.graph_environment.GraphStubsEnvironment", "modulename": "rostok.graph_generators.graph_environment", "qualname": "GraphStubsEnvironment", "kind": "class", "doc": "<p></p>\n", "bases": "GraphEnvironment"}, {"fullname": "rostok.graph_generators.graph_environment.GraphStubsEnvironment.__init__", "modulename": "rostok.graph_generators.graph_environment", "qualname": "GraphStubsEnvironment.__init__", "kind": "function", "doc": "<p>Subclass graph environment for testing on stubs reward</p>\n\n<p>Args:\n    initilize_graph (GraphGrammar): Initial state of the graph\n    rules (list[Rule]): List of rules \n    max_numbers_rules_non_terminal (int): Max amount of non-terminal rules. Defaults to 20.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">initilize_graph</span>, </span><span class=\"param\"><span class=\"n\">rules</span>, </span><span class=\"param\"><span class=\"n\">max_numbers_rules_non_terminal</span><span class=\"o\">=</span><span class=\"mi\">20</span></span>)</span>"}, {"fullname": "rostok.graph_generators.graph_environment.GraphStubsEnvironment.set_node_rewards", "modulename": "rostok.graph_generators.graph_environment", "qualname": "GraphStubsEnvironment.set_node_rewards", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"bp\">self</span>,</span><span class=\"param\">\t<span class=\"n\">map_of_reward</span><span class=\"p\">:</span> <span class=\"nb\">map</span>,</span><span class=\"param\">\t<span class=\"n\">func_reward</span><span class=\"p\">:</span> <span class=\"o\">&lt;</span><span class=\"n\">function</span> <span class=\"n\">get_graph_sum_complex_reward</span><span class=\"o\">&gt;</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "rostok.graph_generators.graph_environment.GraphStubsEnvironment.getReward", "modulename": "rostok.graph_generators.graph_environment", "qualname": "GraphStubsEnvironment.getReward", "kind": "function", "doc": "<p>Reward in number (3) of nodes graph mechanism</p>\n\n<p>Returns:\n    float: Reward of terminal state graph</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "rostok.graph_generators.graph_reward", "modulename": "rostok.graph_generators.graph_reward", "kind": "module", "doc": "<p></p>\n"}, {"fullname": "rostok.graph_generators.graph_reward.get_graph_sum_complex_reward", "modulename": "rostok.graph_generators.graph_reward", "qualname": "get_graph_sum_complex_reward", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"n\">graph</span><span class=\"p\">:</span> <span class=\"n\">rostok</span><span class=\"o\">.</span><span class=\"n\">graph_grammar</span><span class=\"o\">.</span><span class=\"n\">node</span><span class=\"o\">.</span><span class=\"n\">GraphGrammar</span>,</span><span class=\"param\">\t<span class=\"n\">reward_map</span><span class=\"p\">:</span> <span class=\"nb\">dict</span><span class=\"p\">[</span><span class=\"n\">rostok</span><span class=\"o\">.</span><span class=\"n\">graph_grammar</span><span class=\"o\">.</span><span class=\"n\">node</span><span class=\"o\">.</span><span class=\"n\">Node</span><span class=\"p\">,</span> <span class=\"nb\">float</span><span class=\"p\">]</span></span><span class=\"return-annotation\">) -> <span class=\"nb\">float</span>:</span></span>", "funcdef": "def"}, {"fullname": "rostok.graph_generators.graph_reward.get_graph_mul_reward", "modulename": "rostok.graph_generators.graph_reward", "qualname": "get_graph_mul_reward", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"n\">graph</span><span class=\"p\">:</span> <span class=\"n\">rostok</span><span class=\"o\">.</span><span class=\"n\">graph_grammar</span><span class=\"o\">.</span><span class=\"n\">node</span><span class=\"o\">.</span><span class=\"n\">GraphGrammar</span>,</span><span class=\"param\">\t<span class=\"n\">reward_map</span><span class=\"p\">:</span> <span class=\"nb\">dict</span><span class=\"p\">[</span><span class=\"n\">rostok</span><span class=\"o\">.</span><span class=\"n\">graph_grammar</span><span class=\"o\">.</span><span class=\"n\">node</span><span class=\"o\">.</span><span class=\"n\">Node</span><span class=\"p\">,</span> <span class=\"nb\">float</span><span class=\"p\">]</span></span><span class=\"return-annotation\">) -> <span class=\"nb\">float</span>:</span></span>", "funcdef": "def"}, {"fullname": "rostok.graph_generators.graph_reward.Reward", "modulename": "rostok.graph_generators.graph_reward", "qualname": "Reward", "kind": "class", "doc": "<p></p>\n"}, {"fullname": "rostok.graph_generators.graph_reward.Reward.__init__", "modulename": "rostok.graph_generators.graph_reward", "qualname": "Reward.__init__", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">()</span>"}, {"fullname": "rostok.graph_generators.graph_reward.Reward.complex", "modulename": "rostok.graph_generators.graph_reward", "qualname": "Reward.complex", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"n\">graph</span><span class=\"p\">:</span> <span class=\"n\">rostok</span><span class=\"o\">.</span><span class=\"n\">graph_grammar</span><span class=\"o\">.</span><span class=\"n\">node</span><span class=\"o\">.</span><span class=\"n\">GraphGrammar</span>,</span><span class=\"param\">\t<span class=\"n\">reward_map</span><span class=\"p\">:</span> <span class=\"nb\">dict</span><span class=\"p\">[</span><span class=\"n\">rostok</span><span class=\"o\">.</span><span class=\"n\">graph_grammar</span><span class=\"o\">.</span><span class=\"n\">node</span><span class=\"o\">.</span><span class=\"n\">Node</span><span class=\"p\">,</span> <span class=\"nb\">float</span><span class=\"p\">]</span></span><span class=\"return-annotation\">) -> <span class=\"nb\">float</span>:</span></span>", "funcdef": "def"}, {"fullname": "rostok.graph_generators.graph_reward.Reward.multiply", "modulename": "rostok.graph_generators.graph_reward", "qualname": "Reward.multiply", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"n\">graph</span><span class=\"p\">:</span> <span class=\"n\">rostok</span><span class=\"o\">.</span><span class=\"n\">graph_grammar</span><span class=\"o\">.</span><span class=\"n\">node</span><span class=\"o\">.</span><span class=\"n\">GraphGrammar</span>,</span><span class=\"param\">\t<span class=\"n\">reward_map</span><span class=\"p\">:</span> <span class=\"nb\">dict</span><span class=\"p\">[</span><span class=\"n\">rostok</span><span class=\"o\">.</span><span class=\"n\">graph_grammar</span><span class=\"o\">.</span><span class=\"n\">node</span><span class=\"o\">.</span><span class=\"n\">Node</span><span class=\"p\">,</span> <span class=\"nb\">float</span><span class=\"p\">]</span></span><span class=\"return-annotation\">) -> <span class=\"nb\">float</span>:</span></span>", "funcdef": "def"}, {"fullname": "rostok.graph_grammar", "modulename": "rostok.graph_grammar", "kind": "module", "doc": "<p></p>\n"}, {"fullname": "rostok.graph_grammar.graph_utils", "modulename": "rostok.graph_grammar.graph_utils", "kind": "module", "doc": "<p></p>\n"}, {"fullname": "rostok.graph_grammar.graph_utils.replace_nodes", "modulename": "rostok.graph_grammar.graph_utils", "qualname": "replace_nodes", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"n\">graph</span><span class=\"p\">:</span> <span class=\"n\">rostok</span><span class=\"o\">.</span><span class=\"n\">graph_grammar</span><span class=\"o\">.</span><span class=\"n\">node</span><span class=\"o\">.</span><span class=\"n\">GraphGrammar</span>,</span><span class=\"param\">\tmapping: dict[slice(&lt;class &#x27;rostok.graph_grammar.node.Node&#x27;&gt;, &lt;class &#x27;rostok.graph_grammar.node.Node&#x27;&gt;, None)]</span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "rostok.graph_grammar.make_random_graph", "modulename": "rostok.graph_grammar.make_random_graph", "kind": "module", "doc": "<p></p>\n"}, {"fullname": "rostok.graph_grammar.make_random_graph.make_random_graph", "modulename": "rostok.graph_grammar.make_random_graph", "qualname": "make_random_graph", "kind": "function", "doc": "<p>Return random graph made with n_iter rules</p>\n\n<p>At each step applied a random rule from a list of rules appliable for the current grahp. \nIf use_nonterminal_only is True all applied rules are True, if it is Flase, first half of rules will be nonterminal and\nthe second half will be random terminal and nonterminal.</p>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"n\">n_iter</span><span class=\"p\">:</span> <span class=\"nb\">int</span>,</span><span class=\"param\">\t<span class=\"n\">rule_vocab</span><span class=\"p\">:</span> <span class=\"n\">rostok</span><span class=\"o\">.</span><span class=\"n\">graph_grammar</span><span class=\"o\">.</span><span class=\"n\">rule_vocabulary</span><span class=\"o\">.</span><span class=\"n\">RuleVocabulary</span>,</span><span class=\"param\">\t<span class=\"n\">use_nonterminal_only</span><span class=\"p\">:</span> <span class=\"nb\">bool</span> <span class=\"o\">=</span> <span class=\"kc\">True</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "rostok.graph_grammar.node", "modulename": "rostok.graph_grammar.node", "kind": "module", "doc": "<p></p>\n"}, {"fullname": "rostok.graph_grammar.node.BlockWrapper", "modulename": "rostok.graph_grammar.node", "qualname": "BlockWrapper", "kind": "class", "doc": "<p>Class is interface between node and interpretation in simulation.</p>\n\n<p>The interface allows you to create an interpretation of terminal nodes in the simulation. Interpretation classes is in <code>rostok.block_builder.node_render</code>.\nThe instance must be specified when creating the node.\nWhen assembling a robot from a graph, an object is created by the <code>create_block</code> method.\nWhen the object is created, the desired arguments of the interpretation object are set.</p>\n\n<p>Args:\n    block_cls: Interpretation class of node in simulation\n    args: Arguments <code>block_cls</code>\n    kwargs: Additional arguments <code>block_cls</code></p>\n"}, {"fullname": "rostok.graph_grammar.node.BlockWrapper.__init__", "modulename": "rostok.graph_grammar.node", "qualname": "BlockWrapper.__init__", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">block_cls</span>, </span><span class=\"param\"><span class=\"o\">*</span><span class=\"n\">args</span>, </span><span class=\"param\"><span class=\"o\">**</span><span class=\"n\">kwargs</span></span>)</span>"}, {"fullname": "rostok.graph_grammar.node.BlockWrapper.create_block", "modulename": "rostok.graph_grammar.node", "qualname": "BlockWrapper.create_block", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">builder</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "rostok.graph_grammar.node.Node", "modulename": "rostok.graph_grammar.node", "qualname": "Node", "kind": "class", "doc": "<p>Contains information about the label and block_wrapper,\nwhich is the physical representation of the node in the simulator</p>\n"}, {"fullname": "rostok.graph_grammar.node.Node.__init__", "modulename": "rostok.graph_grammar.node", "qualname": "Node.__init__", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"n\">label</span><span class=\"p\">:</span> <span class=\"nb\">str</span> <span class=\"o\">=</span> <span class=\"s1\">&#39;*&#39;</span>,</span><span class=\"param\">\t<span class=\"n\">is_terminal</span><span class=\"p\">:</span> <span class=\"nb\">bool</span> <span class=\"o\">=</span> <span class=\"kc\">False</span>,</span><span class=\"param\">\t<span class=\"n\">block_wrapper</span><span class=\"p\">:</span> <span class=\"n\">rostok</span><span class=\"o\">.</span><span class=\"n\">graph_grammar</span><span class=\"o\">.</span><span class=\"n\">node</span><span class=\"o\">.</span><span class=\"n\">BlockWrapper</span> <span class=\"o\">=</span> <span class=\"kc\">None</span></span>)</span>"}, {"fullname": "rostok.graph_grammar.node.Rule", "modulename": "rostok.graph_grammar.node", "qualname": "Rule", "kind": "class", "doc": "<p>The class contains a graph object for substitution into the generated graph\nand the target node which will be replaced by self.graph_insert.\nThe feature of the rule's terminality is automatically determined.\nId's mean V from graph theory, do not intersect with V from generated graph.</p>\n"}, {"fullname": "rostok.graph_grammar.node.Rule.__init__", "modulename": "rostok.graph_grammar.node", "qualname": "Rule.__init__", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">()</span>"}, {"fullname": "rostok.graph_grammar.node.WrapperTuple", "modulename": "rostok.graph_grammar.node", "qualname": "WrapperTuple", "kind": "class", "doc": "<p>The return type is used to build the Robot.\nId - \u0438\u0437 \u0433\u0435\u043d\u0435\u0440\u0438\u0440\u0443\u0435\u043c\u043e\u0433\u043e \u0433\u0440\u0430\u0444\u0430</p>\n"}, {"fullname": "rostok.graph_grammar.node.WrapperTuple.__init__", "modulename": "rostok.graph_grammar.node", "qualname": "WrapperTuple.__init__", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"nb\">id</span><span class=\"p\">:</span> <span class=\"nb\">int</span>, </span><span class=\"param\"><span class=\"n\">block_wrapper</span><span class=\"p\">:</span> <span class=\"n\">rostok</span><span class=\"o\">.</span><span class=\"n\">graph_grammar</span><span class=\"o\">.</span><span class=\"n\">node</span><span class=\"o\">.</span><span class=\"n\">BlockWrapper</span></span>)</span>"}, {"fullname": "rostok.graph_grammar.node.GraphGrammar", "modulename": "rostok.graph_grammar.node", "qualname": "GraphGrammar", "kind": "class", "doc": "<p>A class for using generative rules (similar to L grammar) and manipulating the construction graph.\nThe mechanism for assignment a unique Id, each added node using rule_apply will increase the counter.\nSupports methods from networkx.DiGraph ancestor class</p>\n", "bases": "networkx.classes.digraph.DiGraph"}, {"fullname": "rostok.graph_grammar.node.GraphGrammar.__init__", "modulename": "rostok.graph_grammar.node", "qualname": "GraphGrammar.__init__", "kind": "function", "doc": "<p>Initialize a graph with edges, name, or graph attributes.</p>\n\n<h2 id=\"parameters\">Parameters</h2>\n\n<p>incoming_graph_data : input graph (optional, default: None)\n    Data to initialize graph.  If None (default) an empty\n    graph is created.  The data can be an edge list, or any\n    NetworkX graph object.  If the corresponding optional Python\n    packages are installed the data can also be a 2D NumPy array, a\n    SciPy sparse matrix, or a PyGraphviz graph.</p>\n\n<p>attr : keyword arguments, optional (default= no attributes)\n    Attributes to add to graph as key=value pairs.</p>\n\n<h2 id=\"see-also\">See Also</h2>\n\n<p>convert</p>\n\n<h2 id=\"examples\">Examples</h2>\n\n<div class=\"pdoc-code codehilite\">\n<pre><span></span><code><span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">G</span> <span class=\"o\">=</span> <span class=\"n\">nx</span><span class=\"o\">.</span><span class=\"n\">Graph</span><span class=\"p\">()</span>  <span class=\"c1\"># or DiGraph, MultiGraph, MultiDiGraph, etc</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">G</span> <span class=\"o\">=</span> <span class=\"n\">nx</span><span class=\"o\">.</span><span class=\"n\">Graph</span><span class=\"p\">(</span><span class=\"n\">name</span><span class=\"o\">=</span><span class=\"s2\">&quot;my graph&quot;</span><span class=\"p\">)</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">e</span> <span class=\"o\">=</span> <span class=\"p\">[(</span><span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"mi\">2</span><span class=\"p\">),</span> <span class=\"p\">(</span><span class=\"mi\">2</span><span class=\"p\">,</span> <span class=\"mi\">3</span><span class=\"p\">),</span> <span class=\"p\">(</span><span class=\"mi\">3</span><span class=\"p\">,</span> <span class=\"mi\">4</span><span class=\"p\">)]</span>  <span class=\"c1\"># list of edges</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">G</span> <span class=\"o\">=</span> <span class=\"n\">nx</span><span class=\"o\">.</span><span class=\"n\">Graph</span><span class=\"p\">(</span><span class=\"n\">e</span><span class=\"p\">)</span>\n</code></pre>\n</div>\n\n<p>Arbitrary graph attribute pairs (key=value) may be assigned</p>\n\n<div class=\"pdoc-code codehilite\">\n<pre><span></span><code><span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">G</span> <span class=\"o\">=</span> <span class=\"n\">nx</span><span class=\"o\">.</span><span class=\"n\">Graph</span><span class=\"p\">(</span><span class=\"n\">e</span><span class=\"p\">,</span> <span class=\"n\">day</span><span class=\"o\">=</span><span class=\"s2\">&quot;Friday&quot;</span><span class=\"p\">)</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">G</span><span class=\"o\">.</span><span class=\"n\">graph</span>\n<span class=\"go\">{&#39;day&#39;: &#39;Friday&#39;}</span>\n</code></pre>\n</div>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"o\">**</span><span class=\"n\">attr</span></span>)</span>"}, {"fullname": "rostok.graph_grammar.node.GraphGrammar.find_nodes", "modulename": "rostok.graph_grammar.node", "qualname": "GraphGrammar.find_nodes", "kind": "function", "doc": "<h2 id=\"parameters\">Parameters</h2>\n\n<p>match : Node\n    Node for find, matched by label</p>\n\n<h2 id=\"returns\">Returns</h2>\n\n<p>list[int]\n    Id of matched nodes</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">match</span><span class=\"p\">:</span> <span class=\"n\">rostok</span><span class=\"o\">.</span><span class=\"n\">graph_grammar</span><span class=\"o\">.</span><span class=\"n\">node</span><span class=\"o\">.</span><span class=\"n\">Node</span></span><span class=\"return-annotation\">) -> <span class=\"nb\">list</span><span class=\"p\">[</span><span class=\"nb\">int</span><span class=\"p\">]</span>:</span></span>", "funcdef": "def"}, {"fullname": "rostok.graph_grammar.node.GraphGrammar.closest_node_to_root", "modulename": "rostok.graph_grammar.node", "qualname": "GraphGrammar.closest_node_to_root", "kind": "function", "doc": "<p>Note, all edges have a weight of 1</p>\n\n<h2 id=\"parameters\">Parameters</h2>\n\n<p>list_ids : list[int]</p>\n\n<h2 id=\"returns\">Returns</h2>\n\n<p>int\n    id of closest Node</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">list_ids</span><span class=\"p\">:</span> <span class=\"nb\">list</span><span class=\"p\">[</span><span class=\"nb\">int</span><span class=\"p\">]</span></span><span class=\"return-annotation\">) -> <span class=\"nb\">int</span>:</span></span>", "funcdef": "def"}, {"fullname": "rostok.graph_grammar.node.GraphGrammar.get_root_id", "modulename": "rostok.graph_grammar.node", "qualname": "GraphGrammar.get_root_id", "kind": "function", "doc": "<h2 id=\"returns\">Returns</h2>\n\n<p>int\n    root id</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">) -> <span class=\"nb\">int</span>:</span></span>", "funcdef": "def"}, {"fullname": "rostok.graph_grammar.node.GraphGrammar.apply_rule", "modulename": "rostok.graph_grammar.node", "qualname": "GraphGrammar.apply_rule", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">rule</span><span class=\"p\">:</span> <span class=\"n\">rostok</span><span class=\"o\">.</span><span class=\"n\">graph_grammar</span><span class=\"o\">.</span><span class=\"n\">node</span><span class=\"o\">.</span><span class=\"n\">Rule</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "rostok.graph_grammar.node.GraphGrammar.node_levels_bfs", "modulename": "rostok.graph_grammar.node", "qualname": "GraphGrammar.node_levels_bfs", "kind": "function", "doc": "<p>Devide nodes into levels.</p>\n\n<p>Return a list of lists of nodes where each inner list is a \nlevel in respect to the 'root', which is the node with no in edges. \nThis function should be reviewed once we start to use graphs with cycles and not just trees</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">) -> <span class=\"nb\">list</span><span class=\"p\">[</span><span class=\"nb\">list</span><span class=\"p\">[</span><span class=\"nb\">int</span><span class=\"p\">]]</span>:</span></span>", "funcdef": "def"}, {"fullname": "rostok.graph_grammar.node.GraphGrammar.graph_partition_dfs", "modulename": "rostok.graph_grammar.node", "qualname": "GraphGrammar.graph_partition_dfs", "kind": "function", "doc": "<h2 id=\"returns\">Returns</h2>\n\n<p>list[list[int]]\n    2D list\n    Row is branch of graph\n    Collum is id node</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">) -> <span class=\"nb\">list</span><span class=\"p\">[</span><span class=\"nb\">list</span><span class=\"p\">[</span><span class=\"nb\">int</span><span class=\"p\">]]</span>:</span></span>", "funcdef": "def"}, {"fullname": "rostok.graph_grammar.node.GraphGrammar.build_terminal_wrapper_array", "modulename": "rostok.graph_grammar.node", "qualname": "GraphGrammar.build_terminal_wrapper_array", "kind": "function", "doc": "<p>Returns a 2-d array of the shape dfs_partition</p>\n\n<h2 id=\"returns\">Returns</h2>\n\n<p>list[list[WrapperTuple]]</p>\n\n<h2 id=\"raises\">Raises</h2>\n\n<p>Exception\n    Exception('Graph contain non-terminal elements')</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">) -> <span class=\"nb\">list</span><span class=\"p\">[</span><span class=\"nb\">list</span><span class=\"p\">[</span><span class=\"n\">rostok</span><span class=\"o\">.</span><span class=\"n\">graph_grammar</span><span class=\"o\">.</span><span class=\"n\">node</span><span class=\"o\">.</span><span class=\"n\">WrapperTuple</span><span class=\"p\">]]</span>:</span></span>", "funcdef": "def"}, {"fullname": "rostok.graph_grammar.node.GraphGrammar.get_node_by_id", "modulename": "rostok.graph_grammar.node", "qualname": "GraphGrammar.get_node_by_id", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">node_id</span><span class=\"p\">:</span> <span class=\"nb\">int</span></span><span class=\"return-annotation\">) -> <span class=\"n\">rostok</span><span class=\"o\">.</span><span class=\"n\">graph_grammar</span><span class=\"o\">.</span><span class=\"n\">node</span><span class=\"o\">.</span><span class=\"n\">Node</span>:</span></span>", "funcdef": "def"}, {"fullname": "rostok.graph_grammar.node.GraphGrammar.get_ids_in_dfs_order", "modulename": "rostok.graph_grammar.node", "qualname": "GraphGrammar.get_ids_in_dfs_order", "kind": "function", "doc": "<p>Iterate in deep first order over node ids\nOne of the options to present the graph in a flat form</p>\n\n<h2 id=\"returns\">Returns</h2>\n\n<p>list[int]\n    List ids</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">) -> <span class=\"nb\">list</span><span class=\"p\">[</span><span class=\"nb\">int</span><span class=\"p\">]</span>:</span></span>", "funcdef": "def"}, {"fullname": "rostok.graph_grammar.node_vocabulary", "modulename": "rostok.graph_grammar.node_vocabulary", "kind": "module", "doc": "<p>Class NodeVocabulary</p>\n"}, {"fullname": "rostok.graph_grammar.node_vocabulary.NodeVocabulary", "modulename": "rostok.graph_grammar.node_vocabulary", "qualname": "NodeVocabulary", "kind": "class", "doc": "<p>A class to contain nodes for robot graphs.</p>\n\n<h2 id=\"attributes\">Attributes</h2>\n\n<p>node_dict: List[Node]\n    dictionary of all nodes \nterminal_node_dict:  List[Node]\n    dictionary of terminal nodes \nnonterminal_node_dict:  List[Node]\n    dictionary of nonterminal nodes </p>\n\n<h2 id=\"methods\">Methods</h2>\n\n<p>add_node(node: Node)\n    Adds a node that already created\ncreate_node(self, label: str, is_terminal:bool=False, block_wrapper:BlockWrapper=None):\n    Create a node and add it to the vocabulary.\ndef get_node(self, label:str) -> Node:\n    Return a node corresponding to the label.\ncheck_node(self, label:str)->bool:\n    Check if the label is in the vocabulary.</p>\n"}, {"fullname": "rostok.graph_grammar.node_vocabulary.NodeVocabulary.__init__", "modulename": "rostok.graph_grammar.node_vocabulary", "qualname": "NodeVocabulary.__init__", "kind": "function", "doc": "<p>Create an empty vocabulary. Currently no parameters.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">()</span>"}, {"fullname": "rostok.graph_grammar.node_vocabulary.NodeVocabulary.add_node", "modulename": "rostok.graph_grammar.node_vocabulary", "qualname": "NodeVocabulary.add_node", "kind": "function", "doc": "<p>Add an already created node to the vocabulary.</p>\n\n<h2 id=\"parameters\">Parameters</h2>\n\n<p>node: Node\n    node to be added to vocabulary</p>\n\n<h2 id=\"raises\">Raises</h2>\n\n<p>Exception\n    If the label of the new node is already in the vocabulary</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">node</span><span class=\"p\">:</span> <span class=\"n\">rostok</span><span class=\"o\">.</span><span class=\"n\">graph_grammar</span><span class=\"o\">.</span><span class=\"n\">node</span><span class=\"o\">.</span><span class=\"n\">Node</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "rostok.graph_grammar.node_vocabulary.NodeVocabulary.create_node", "modulename": "rostok.graph_grammar.node_vocabulary", "qualname": "NodeVocabulary.create_node", "kind": "function", "doc": "<p>Create a node and add it to the vocabulary.</p>\n\n<h2 id=\"parameters\">Parameters</h2>\n\n<p>label: str\n    the label of the new node\nis_terminal:bool, optional\n    defines if the new node is a terminal node. Default is False\nblock_wrapper:\n    the wrapper of the node that would be used to create a chrono object for simulation</p>\n\n<h2 id=\"raises\">Raises</h2>\n\n<p>Exception\n    If the label of the new node is already in the vocabulary</p>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"bp\">self</span>,</span><span class=\"param\">\t<span class=\"n\">label</span><span class=\"p\">:</span> <span class=\"nb\">str</span>,</span><span class=\"param\">\t<span class=\"n\">is_terminal</span><span class=\"p\">:</span> <span class=\"nb\">bool</span> <span class=\"o\">=</span> <span class=\"kc\">False</span>,</span><span class=\"param\">\t<span class=\"n\">block_wrapper</span><span class=\"p\">:</span> <span class=\"n\">rostok</span><span class=\"o\">.</span><span class=\"n\">graph_grammar</span><span class=\"o\">.</span><span class=\"n\">node</span><span class=\"o\">.</span><span class=\"n\">BlockWrapper</span> <span class=\"o\">=</span> <span class=\"kc\">None</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "rostok.graph_grammar.node_vocabulary.NodeVocabulary.get_node", "modulename": "rostok.graph_grammar.node_vocabulary", "qualname": "NodeVocabulary.get_node", "kind": "function", "doc": "<p>Return a node corresponding to the label.</p>\n\n<h2 id=\"parameters\">Parameters</h2>\n\n<p>label:str\n    the label of the node that should be returned</p>\n\n<h2 id=\"raises\">Raises</h2>\n\n<p>Exception\n    If the node with label doesn't exist in the vocabulary</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">label</span><span class=\"p\">:</span> <span class=\"nb\">str</span></span><span class=\"return-annotation\">) -> <span class=\"n\">rostok</span><span class=\"o\">.</span><span class=\"n\">graph_grammar</span><span class=\"o\">.</span><span class=\"n\">node</span><span class=\"o\">.</span><span class=\"n\">Node</span>:</span></span>", "funcdef": "def"}, {"fullname": "rostok.graph_grammar.node_vocabulary.NodeVocabulary.check_node", "modulename": "rostok.graph_grammar.node_vocabulary", "qualname": "NodeVocabulary.check_node", "kind": "function", "doc": "<p>Check if the label is in the vocabulary.</p>\n\n<h2 id=\"parameters\">Parameters</h2>\n\n<p>label:str\n    the label of the node that should be checked</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">label</span><span class=\"p\">:</span> <span class=\"nb\">str</span></span><span class=\"return-annotation\">) -> <span class=\"nb\">bool</span>:</span></span>", "funcdef": "def"}, {"fullname": "rostok.graph_grammar.node_vocabulary.NodeVocabulary.get_list_of_nodes", "modulename": "rostok.graph_grammar.node_vocabulary", "qualname": "NodeVocabulary.get_list_of_nodes", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">nodes</span><span class=\"p\">:</span> <span class=\"nb\">list</span><span class=\"p\">[</span><span class=\"nb\">str</span><span class=\"p\">]</span></span><span class=\"return-annotation\">) -> <span class=\"nb\">list</span><span class=\"p\">[</span><span class=\"n\">rostok</span><span class=\"o\">.</span><span class=\"n\">graph_grammar</span><span class=\"o\">.</span><span class=\"n\">node</span><span class=\"o\">.</span><span class=\"n\">Node</span><span class=\"p\">]</span>:</span></span>", "funcdef": "def"}, {"fullname": "rostok.graph_grammar.nodes_division", "modulename": "rostok.graph_grammar.nodes_division", "kind": "module", "doc": "<p></p>\n"}, {"fullname": "rostok.graph_grammar.nodes_division.nodes_division", "modulename": "rostok.graph_grammar.nodes_division", "qualname": "nodes_division", "kind": "function", "doc": "<p>Division all nodes by type (body, joint, etc.)\nArgs:\n    rob (robot): instance of the Robot class \n    list_N (list): desired type of joints\nReturns:\n    NODES_NEW(list): list of nodes of the desired type from the robot</p>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"n\">rob</span><span class=\"p\">:</span> <span class=\"o\">&lt;</span><span class=\"n\">module</span> <span class=\"s1\">&#39;rostok.virtual_experiment.robot&#39;</span> <span class=\"kn\">from</span> <span class=\"s1\">&#39;c:</span><span class=\"se\">\\\\</span><span class=\"s1\">prj</span><span class=\"se\">\\\\</span><span class=\"s1\">graph_assembler</span><span class=\"se\">\\\\</span><span class=\"s1\">rostok</span><span class=\"se\">\\\\</span><span class=\"s1\">virtual_experiment</span><span class=\"se\">\\\\</span><span class=\"s1\">robot.py&#39;</span><span class=\"o\">&gt;</span>,</span><span class=\"param\">\t<span class=\"n\">list_N</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "rostok.graph_grammar.nodes_division.sort_left_right", "modulename": "rostok.graph_grammar.nodes_division", "qualname": "sort_left_right", "kind": "function", "doc": "<p>Sorting nodes of Body type into right/left (depending on finger's side) and splitting them by fingers \nArgs:\n    rob (robot): instance of the robot class \n    list_S (list):side list that contains transition node (left/right)\n    list_B (list): list of possible Body nodes\nRaises:\n    StopIteration: If finger has \"side\" node from list_S\nReturns:\n    NODES_NEW (list): list that contains lists of nodes of Body type with side from list_S; size \n                      size of list NODES_NEW is equal numbers of fingers from a relevant side</p>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"n\">rob</span><span class=\"p\">:</span> <span class=\"o\">&lt;</span><span class=\"n\">module</span> <span class=\"s1\">&#39;rostok.virtual_experiment.robot&#39;</span> <span class=\"kn\">from</span> <span class=\"s1\">&#39;c:</span><span class=\"se\">\\\\</span><span class=\"s1\">prj</span><span class=\"se\">\\\\</span><span class=\"s1\">graph_assembler</span><span class=\"se\">\\\\</span><span class=\"s1\">rostok</span><span class=\"se\">\\\\</span><span class=\"s1\">virtual_experiment</span><span class=\"se\">\\\\</span><span class=\"s1\">robot.py&#39;</span><span class=\"o\">&gt;</span>,</span><span class=\"param\">\t<span class=\"n\">list_S</span>,</span><span class=\"param\">\t<span class=\"n\">list_B</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "rostok.graph_grammar.nodes_division.traj_to_list", "modulename": "rostok.graph_grammar.nodes_division", "qualname": "traj_to_list", "kind": "function", "doc": "<p>Combines simulation results with the corresponding node\nArgs:\n    B_NODES (list): list that contains nodes of Body type \n    J_NODES (list): list that contains nodes of Joint type \n    LB_NODES (list): list that contains lists of nodes of Body type from left fingers\n    RB_NODES (list): list that contains lists of nodes of Body type from right fingers\n    sim_out (dict): results of simulation\nReturns:\n    B: list of dictionaries that contains required information (id, number of contact surfaces, contact forces) about node of Body type after simulation\n    J: list of dictionaries that contains required information (id, angle time-series values) about node of Joint type after simulation\n    LB: list of lists that contain dictionaries with required information (id, COG) about node of Body type from left fingers after simulation\n    RB: list of lists that contain dictionaries with required information (id, COG) about node of Body type from right fingers after simulation</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">B_NODES</span>, </span><span class=\"param\"><span class=\"n\">J_NODES</span>, </span><span class=\"param\"><span class=\"n\">LB_NODES</span>, </span><span class=\"param\"><span class=\"n\">RB_NODES</span>, </span><span class=\"param\"><span class=\"n\">sim_out</span><span class=\"p\">:</span> <span class=\"nb\">dict</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "rostok.graph_grammar.rule_vocabulary", "modulename": "rostok.graph_grammar.rule_vocabulary", "kind": "module", "doc": "<p>Class RuleVocabulary.</p>\n"}, {"fullname": "rostok.graph_grammar.rule_vocabulary.RuleVocabulary", "modulename": "rostok.graph_grammar.rule_vocabulary", "qualname": "RuleVocabulary", "kind": "class", "doc": "<p>The class that contains the rules for building the GraphGrammar object</p>\n\n<h2 id=\"attributes\">Attributes</h2>\n\n<p>node_vocab: NodeVocabulary\n    the node vocabulary that should contain all the nodes used in the rules\nrule_dict: Dictionary{name: rule}\n    the dictionary of all rules with the rule names as keys\nnonterminal_rule_dict: Dictionary{name: rule}\n    the dictionary of nonterminal rules\nterminal_rule_dict: Dictionary{name: rule}\n    the dictionary of terminal rules\nrules_nonterminal_node_set: Set(Node.label)\n    the set of node labels that are used as the new nodes in the nonterminal rules. These are nodes that can appear in the final graph\nrules_terminal_node_set: Set(Node.label)\n    the set of node labels that are used as the new nodes in the terminal rules. These are nodes that can appear in the final graph\nterminal_dict: dict{Node.label: [Node.label]}\n    the dictionary of the terminal states of the nonterminal node\ncompleted: bool\n    the state that changes in the check_rules() method if the set of rules is enough to make any graph terminal</p>\n"}, {"fullname": "rostok.graph_grammar.rule_vocabulary.RuleVocabulary.__init__", "modulename": "rostok.graph_grammar.rule_vocabulary", "qualname": "RuleVocabulary.__init__", "kind": "function", "doc": "<p>Cretae a new empty vocabulary object.</p>\n\n<h2 id=\"parameters\">Parameters</h2>\n\n<p>node_vocab: NodeVocabulary, optional\n    the node vocabulary for the rules. Default - empty node vocabulary</p>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"n\">node_vocab</span><span class=\"p\">:</span> <span class=\"n\">rostok</span><span class=\"o\">.</span><span class=\"n\">graph_grammar</span><span class=\"o\">.</span><span class=\"n\">node_vocabulary</span><span class=\"o\">.</span><span class=\"n\">NodeVocabulary</span> <span class=\"o\">=</span> <span class=\"o\">&lt;</span><span class=\"n\">rostok</span><span class=\"o\">.</span><span class=\"n\">graph_grammar</span><span class=\"o\">.</span><span class=\"n\">node_vocabulary</span><span class=\"o\">.</span><span class=\"n\">NodeVocabulary</span> <span class=\"nb\">object</span><span class=\"o\">&gt;</span></span>)</span>"}, {"fullname": "rostok.graph_grammar.rule_vocabulary.RuleVocabulary.create_rule", "modulename": "rostok.graph_grammar.rule_vocabulary", "qualname": "RuleVocabulary.create_rule", "kind": "function", "doc": "<p>Create a rule and add it to the dictionary.</p>\n\n<p>The method checks the created rule. There is no method to add already created rule to the vocabulary.</p>\n\n<h2 id=\"parameters\">Parameters</h2>\n\n<p>name:str\n    name of the new rule\ncurrent_nodes: list[str]\n    list of the nodes to be replased\nnew_nodes:\n    list of the new nodes that to be inserted in the graph\ncurrent_in_edges: int\n    the node to link the in edges of the replaced node\ncurrent_out_edges: int\n    the node to link the out edges of the replaced node\nnew_edges:list[(int, int)]\n    the edges of the inserting subgraph</p>\n\n<h2 id=\"raises\">Raises</h2>\n\n<p>Exception\n    If the name of the new rule is already in the vocabulary\nException\n    If the length of the current_nodes is not 1\nException\n    If the node vocabulary dose not include the replacing node or the new nodes\nException\n    If the edge contains node idx out of graph length or the edge is a loop\nException\n    Attempt to link in or out edges of the replaced node to the node idx out of new subgraph length</p>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"bp\">self</span>,</span><span class=\"param\">\t<span class=\"n\">name</span><span class=\"p\">:</span> <span class=\"nb\">str</span>,</span><span class=\"param\">\t<span class=\"n\">current_nodes</span><span class=\"p\">:</span> <span class=\"nb\">list</span><span class=\"p\">[</span><span class=\"nb\">str</span><span class=\"p\">]</span>,</span><span class=\"param\">\t<span class=\"n\">new_nodes</span><span class=\"p\">:</span> <span class=\"nb\">list</span><span class=\"p\">[</span><span class=\"nb\">str</span><span class=\"p\">]</span>,</span><span class=\"param\">\t<span class=\"n\">current_in_edges</span><span class=\"p\">:</span> <span class=\"nb\">int</span>,</span><span class=\"param\">\t<span class=\"n\">current_out_edges</span><span class=\"p\">:</span> <span class=\"nb\">int</span>,</span><span class=\"param\">\t<span class=\"n\">new_edges</span><span class=\"p\">:</span> <span class=\"nb\">list</span><span class=\"p\">[</span><span class=\"nb\">int</span><span class=\"p\">,</span> <span class=\"nb\">int</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"p\">[]</span>,</span><span class=\"param\">\t<span class=\"n\">current_links</span><span class=\"p\">:</span> <span class=\"nb\">list</span><span class=\"p\">[</span><span class=\"nb\">int</span><span class=\"p\">,</span> <span class=\"nb\">int</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"p\">[]</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "rostok.graph_grammar.rule_vocabulary.RuleVocabulary.check_rules", "modulename": "rostok.graph_grammar.rule_vocabulary", "qualname": "RuleVocabulary.check_rules", "kind": "function", "doc": "<p>Check set of rules itself, without any graph.</p>\n\n<p>Check the rules for having at least one terminal rule for every node that appears in the end graph of a nonterminal rule</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "rostok.graph_grammar.rule_vocabulary.RuleVocabulary.get_rule", "modulename": "rostok.graph_grammar.rule_vocabulary", "qualname": "RuleVocabulary.get_rule", "kind": "function", "doc": "<p>Return a rule with the corresponding name.</p>\n\n<h2 id=\"parameters\">Parameters</h2>\n\n<p>name: str\n    the name of the rule to be returned</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">name</span><span class=\"p\">:</span> <span class=\"nb\">str</span></span><span class=\"return-annotation\">) -> <span class=\"n\">rostok</span><span class=\"o\">.</span><span class=\"n\">graph_grammar</span><span class=\"o\">.</span><span class=\"n\">node</span><span class=\"o\">.</span><span class=\"n\">Rule</span>:</span></span>", "funcdef": "def"}, {"fullname": "rostok.graph_grammar.rule_vocabulary.RuleVocabulary.get_list_of_applicable_rules", "modulename": "rostok.graph_grammar.rule_vocabulary", "qualname": "RuleVocabulary.get_list_of_applicable_rules", "kind": "function", "doc": "<p>Return the total list of applicable rules for the current graph.</p>\n\n<h2 id=\"parameters\">Parameters</h2>\n\n<p>grammar: GraphGrammar\n    A current GraphGrammar object</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">grammar</span><span class=\"p\">:</span> <span class=\"n\">rostok</span><span class=\"o\">.</span><span class=\"n\">graph_grammar</span><span class=\"o\">.</span><span class=\"n\">node</span><span class=\"o\">.</span><span class=\"n\">GraphGrammar</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "rostok.graph_grammar.rule_vocabulary.RuleVocabulary.get_list_of_applicable_nonterminal_rules", "modulename": "rostok.graph_grammar.rule_vocabulary", "qualname": "RuleVocabulary.get_list_of_applicable_nonterminal_rules", "kind": "function", "doc": "<p>Return the list of nonterminal applicable rules for the current graph.</p>\n\n<h2 id=\"parameters\">Parameters</h2>\n\n<p>grammar: GraphGrammar\n    A current GraphGrammar object</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">grammar</span><span class=\"p\">:</span> <span class=\"n\">rostok</span><span class=\"o\">.</span><span class=\"n\">graph_grammar</span><span class=\"o\">.</span><span class=\"n\">node</span><span class=\"o\">.</span><span class=\"n\">GraphGrammar</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "rostok.graph_grammar.rule_vocabulary.RuleVocabulary.get_list_of_applicable_terminal_rules", "modulename": "rostok.graph_grammar.rule_vocabulary", "qualname": "RuleVocabulary.get_list_of_applicable_terminal_rules", "kind": "function", "doc": "<p>Return the list of terminal applicable rules for the current graph.</p>\n\n<h2 id=\"parameters\">Parameters</h2>\n\n<p>grammar: GraphGrammar\n    A current GraphGrammar object</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">grammar</span><span class=\"p\">:</span> <span class=\"n\">rostok</span><span class=\"o\">.</span><span class=\"n\">graph_grammar</span><span class=\"o\">.</span><span class=\"n\">node</span><span class=\"o\">.</span><span class=\"n\">GraphGrammar</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "rostok.graph_grammar.rule_vocabulary.RuleVocabulary.terminal_rules_for_node", "modulename": "rostok.graph_grammar.rule_vocabulary", "qualname": "RuleVocabulary.terminal_rules_for_node", "kind": "function", "doc": "<p>Return a list of the terminal rules for the node</p>\n\n<h2 id=\"parameters\">Parameters</h2>\n\n<p>node_name: str\n    A node label for which function returns the list of the terminal rules</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">node_name</span><span class=\"p\">:</span> <span class=\"nb\">str</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "rostok.graph_grammar.rule_vocabulary.RuleVocabulary.make_graph_terminal", "modulename": "rostok.graph_grammar.rule_vocabulary", "qualname": "RuleVocabulary.make_graph_terminal", "kind": "function", "doc": "<p>Converts a graph into a graph with only terminal nodes with a random terminal rule for each node.</p>\n\n<h2 id=\"parameters\">Parameters</h2>\n\n<p>grammar: GraphGrammar\n    A current GraphGrammar object</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">G</span><span class=\"p\">:</span> <span class=\"n\">rostok</span><span class=\"o\">.</span><span class=\"n\">graph_grammar</span><span class=\"o\">.</span><span class=\"n\">node</span><span class=\"o\">.</span><span class=\"n\">GraphGrammar</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "rostok.trajectory_optimizer", "modulename": "rostok.trajectory_optimizer", "kind": "module", "doc": "<p></p>\n"}, {"fullname": "rostok.trajectory_optimizer.control_optimizer", "modulename": "rostok.trajectory_optimizer.control_optimizer", "kind": "module", "doc": "<p></p>\n"}, {"fullname": "rostok.trajectory_optimizer.control_optimizer.ConfigRewardFunction", "modulename": "rostok.trajectory_optimizer.control_optimizer", "qualname": "ConfigRewardFunction", "kind": "class", "doc": "<p>bound - tuple (lower bound, upper bound) extend to joints number\niters - number of iteration optimization algorithm \nsim_config - config passed to Chrono engine \ntime_step - simulation step\ntime_sim - simulation duration\nflags - List of stop flags, breaks sim \ncriterion_callback - calls after simulation (SimOut, Robot) -> float\nget_rgab_object - calls before simulation () -> ObjectToGrasp\nparams_to_timesiries_array - calls before simulation to calculate trajectory \n(GraphGrammar, list[float]) -> list[list] in dfs form, See class SimulationStepOptimization</p>\n"}, {"fullname": "rostok.trajectory_optimizer.control_optimizer.ConfigRewardFunction.__init__", "modulename": "rostok.trajectory_optimizer.control_optimizer", "qualname": "ConfigRewardFunction.__init__", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"n\">bound</span><span class=\"p\">:</span> <span class=\"nb\">tuple</span><span class=\"p\">[</span><span class=\"nb\">float</span><span class=\"p\">,</span> <span class=\"nb\">float</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"p\">(</span><span class=\"o\">-</span><span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"mi\">1</span><span class=\"p\">)</span>,</span><span class=\"param\">\t<span class=\"n\">iters</span><span class=\"p\">:</span> <span class=\"nb\">int</span> <span class=\"o\">=</span> <span class=\"mi\">10</span>,</span><span class=\"param\">\t<span class=\"n\">sim_config</span><span class=\"p\">:</span> <span class=\"nb\">dict</span><span class=\"p\">[</span><span class=\"nb\">str</span><span class=\"p\">,</span> <span class=\"nb\">str</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"o\">&lt;</span><span class=\"n\">factory</span><span class=\"o\">&gt;</span>,</span><span class=\"param\">\t<span class=\"n\">time_step</span><span class=\"p\">:</span> <span class=\"nb\">float</span> <span class=\"o\">=</span> <span class=\"mf\">0.001</span>,</span><span class=\"param\">\t<span class=\"n\">time_sim</span><span class=\"p\">:</span> <span class=\"nb\">float</span> <span class=\"o\">=</span> <span class=\"mi\">2</span>,</span><span class=\"param\">\t<span class=\"n\">flags</span><span class=\"p\">:</span> <span class=\"nb\">list</span> <span class=\"o\">=</span> <span class=\"o\">&lt;</span><span class=\"n\">factory</span><span class=\"o\">&gt;</span>,</span><span class=\"param\">\t<span class=\"n\">criterion_callback</span><span class=\"p\">:</span> <span class=\"n\">Callable</span><span class=\"p\">[[</span><span class=\"nb\">dict</span><span class=\"p\">[</span><span class=\"nb\">int</span><span class=\"p\">,</span> <span class=\"n\">rostok</span><span class=\"o\">.</span><span class=\"n\">virtual_experiment</span><span class=\"o\">.</span><span class=\"n\">simulation_step</span><span class=\"o\">.</span><span class=\"n\">SimulationDataBlock</span><span class=\"p\">],</span> <span class=\"n\">rostok</span><span class=\"o\">.</span><span class=\"n\">virtual_experiment</span><span class=\"o\">.</span><span class=\"n\">robot</span><span class=\"o\">.</span><span class=\"n\">Robot</span><span class=\"p\">],</span> <span class=\"nb\">float</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"kc\">None</span>,</span><span class=\"param\">\t<span class=\"n\">get_rgab_object_callback</span><span class=\"p\">:</span> <span class=\"n\">Callable</span><span class=\"p\">[[],</span> <span class=\"n\">pychrono</span><span class=\"o\">.</span><span class=\"n\">core</span><span class=\"o\">.</span><span class=\"n\">ChBody</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"kc\">None</span>,</span><span class=\"param\">\t<span class=\"n\">params_to_timesiries_callback</span><span class=\"p\">:</span> <span class=\"n\">Callable</span><span class=\"p\">[[</span><span class=\"n\">rostok</span><span class=\"o\">.</span><span class=\"n\">graph_grammar</span><span class=\"o\">.</span><span class=\"n\">node</span><span class=\"o\">.</span><span class=\"n\">GraphGrammar</span><span class=\"p\">,</span> <span class=\"nb\">list</span><span class=\"p\">[</span><span class=\"nb\">float</span><span class=\"p\">]],</span> <span class=\"nb\">list</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"kc\">None</span></span>)</span>"}, {"fullname": "rostok.trajectory_optimizer.control_optimizer.create_multidimensional_bounds", "modulename": "rostok.trajectory_optimizer.control_optimizer", "qualname": "create_multidimensional_bounds", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"n\">graph</span><span class=\"p\">:</span> <span class=\"n\">rostok</span><span class=\"o\">.</span><span class=\"n\">graph_grammar</span><span class=\"o\">.</span><span class=\"n\">node</span><span class=\"o\">.</span><span class=\"n\">GraphGrammar</span>,</span><span class=\"param\">\t<span class=\"n\">one_d_bound</span><span class=\"p\">:</span> <span class=\"nb\">tuple</span><span class=\"p\">[</span><span class=\"nb\">float</span><span class=\"p\">,</span> <span class=\"nb\">float</span><span class=\"p\">]</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "rostok.trajectory_optimizer.control_optimizer.num_joints", "modulename": "rostok.trajectory_optimizer.control_optimizer", "qualname": "num_joints", "kind": "function", "doc": "<p>Detect joints based on node_render clases</p>\n\n<p>Args:\n    graph (GraphGrammar):</p>\n\n<p>Returns:\n    int: number of joints</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">graph</span><span class=\"p\">:</span> <span class=\"n\">rostok</span><span class=\"o\">.</span><span class=\"n\">graph_grammar</span><span class=\"o\">.</span><span class=\"n\">node</span><span class=\"o\">.</span><span class=\"n\">GraphGrammar</span></span><span class=\"return-annotation\">) -> <span class=\"nb\">int</span>:</span></span>", "funcdef": "def"}, {"fullname": "rostok.trajectory_optimizer.control_optimizer.ControlOptimizer", "modulename": "rostok.trajectory_optimizer.control_optimizer", "qualname": "ControlOptimizer", "kind": "class", "doc": "<p></p>\n"}, {"fullname": "rostok.trajectory_optimizer.control_optimizer.ControlOptimizer.__init__", "modulename": "rostok.trajectory_optimizer.control_optimizer", "qualname": "ControlOptimizer.__init__", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"n\">cfg</span><span class=\"p\">:</span> <span class=\"n\">rostok</span><span class=\"o\">.</span><span class=\"n\">trajectory_optimizer</span><span class=\"o\">.</span><span class=\"n\">control_optimizer</span><span class=\"o\">.</span><span class=\"n\">ConfigRewardFunction</span></span>)</span>"}, {"fullname": "rostok.trajectory_optimizer.control_optimizer.ControlOptimizer.create_reward_function", "modulename": "rostok.trajectory_optimizer.control_optimizer", "qualname": "ControlOptimizer.create_reward_function", "kind": "function", "doc": "<p>Create reward function</p>\n\n<p>Args:\n    generated_graph (GraphGrammar): _description_</p>\n\n<p>Returns:\n    Callable[[list[float]], float]: Function of virtual experemnt that \n    returns reward based on criterion_callback</p>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"bp\">self</span>,</span><span class=\"param\">\t<span class=\"n\">generated_graph</span><span class=\"p\">:</span> <span class=\"n\">rostok</span><span class=\"o\">.</span><span class=\"n\">graph_grammar</span><span class=\"o\">.</span><span class=\"n\">node</span><span class=\"o\">.</span><span class=\"n\">GraphGrammar</span></span><span class=\"return-annotation\">) -> <span class=\"n\">Callable</span><span class=\"p\">[[</span><span class=\"nb\">list</span><span class=\"p\">[</span><span class=\"nb\">float</span><span class=\"p\">]],</span> <span class=\"nb\">float</span><span class=\"p\">]</span>:</span></span>", "funcdef": "def"}, {"fullname": "rostok.trajectory_optimizer.control_optimizer.ControlOptimizer.start_optimisation", "modulename": "rostok.trajectory_optimizer.control_optimizer", "qualname": "ControlOptimizer.start_optimisation", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"bp\">self</span>,</span><span class=\"param\">\t<span class=\"n\">generated_graph</span><span class=\"p\">:</span> <span class=\"n\">rostok</span><span class=\"o\">.</span><span class=\"n\">graph_grammar</span><span class=\"o\">.</span><span class=\"n\">node</span><span class=\"o\">.</span><span class=\"n\">GraphGrammar</span></span><span class=\"return-annotation\">) -> <span class=\"nb\">tuple</span><span class=\"p\">[</span><span class=\"nb\">float</span><span class=\"p\">,</span> <span class=\"nb\">float</span><span class=\"p\">]</span>:</span></span>", "funcdef": "def"}, {"fullname": "rostok.trajectory_optimizer.trajectory_generator", "modulename": "rostok.trajectory_optimizer.trajectory_generator", "kind": "module", "doc": "<p></p>\n"}, {"fullname": "rostok.trajectory_optimizer.trajectory_generator.create_const_traj", "modulename": "rostok.trajectory_optimizer.trajectory_generator", "qualname": "create_const_traj", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">torque_value</span>, </span><span class=\"param\"><span class=\"n\">stop_time</span><span class=\"p\">:</span> <span class=\"nb\">float</span>, </span><span class=\"param\"><span class=\"n\">time_step</span><span class=\"p\">:</span> <span class=\"nb\">float</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "rostok.trajectory_optimizer.trajectory_generator.create_dfs_joint", "modulename": "rostok.trajectory_optimizer.trajectory_generator", "qualname": "create_dfs_joint", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"n\">graph</span><span class=\"p\">:</span> <span class=\"n\">rostok</span><span class=\"o\">.</span><span class=\"n\">graph_grammar</span><span class=\"o\">.</span><span class=\"n\">node</span><span class=\"o\">.</span><span class=\"n\">GraphGrammar</span></span><span class=\"return-annotation\">) -> <span class=\"nb\">list</span><span class=\"p\">[</span><span class=\"nb\">list</span><span class=\"p\">[</span><span class=\"n\">rostok</span><span class=\"o\">.</span><span class=\"n\">graph_grammar</span><span class=\"o\">.</span><span class=\"n\">node</span><span class=\"o\">.</span><span class=\"n\">Node</span><span class=\"p\">]]</span>:</span></span>", "funcdef": "def"}, {"fullname": "rostok.trajectory_optimizer.trajectory_generator.create_torque_traj_from_x", "modulename": "rostok.trajectory_optimizer.trajectory_generator", "qualname": "create_torque_traj_from_x", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"n\">graph</span><span class=\"p\">:</span> <span class=\"n\">rostok</span><span class=\"o\">.</span><span class=\"n\">graph_grammar</span><span class=\"o\">.</span><span class=\"n\">node</span><span class=\"o\">.</span><span class=\"n\">GraphGrammar</span>,</span><span class=\"param\">\t<span class=\"n\">x</span><span class=\"p\">:</span> <span class=\"nb\">list</span><span class=\"p\">[</span><span class=\"nb\">float</span><span class=\"p\">]</span>,</span><span class=\"param\">\t<span class=\"n\">stop_time</span><span class=\"p\">:</span> <span class=\"nb\">float</span>,</span><span class=\"param\">\t<span class=\"n\">time_step</span><span class=\"p\">:</span> <span class=\"nb\">float</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "rostok.utils", "modulename": "rostok.utils", "kind": "module", "doc": "<p></p>\n"}, {"fullname": "rostok.utils.result_saver", "modulename": "rostok.utils.result_saver", "kind": "module", "doc": "<p></p>\n"}, {"fullname": "rostok.utils.result_saver.RobotState", "modulename": "rostok.utils.result_saver", "qualname": "RobotState", "kind": "class", "doc": "<p></p>\n"}, {"fullname": "rostok.utils.result_saver.RobotState.__init__", "modulename": "rostok.utils.result_saver", "qualname": "RobotState.__init__", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">rule_list</span><span class=\"p\">:</span> <span class=\"nb\">list</span><span class=\"p\">[</span><span class=\"nb\">str</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"p\">[]</span></span>)</span>"}, {"fullname": "rostok.utils.result_saver.RobotState.add_rule", "modulename": "rostok.utils.result_saver", "qualname": "RobotState.add_rule", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">rule</span><span class=\"p\">:</span> <span class=\"nb\">str</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "rostok.utils.result_saver.RobotState.create_and_add", "modulename": "rostok.utils.result_saver", "qualname": "RobotState.create_and_add", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">rule</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "rostok.utils.result_saver.RobotState.make_graph", "modulename": "rostok.utils.result_saver", "qualname": "RobotState.make_graph", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">rules</span><span class=\"p\">:</span> <span class=\"n\">rostok</span><span class=\"o\">.</span><span class=\"n\">graph_grammar</span><span class=\"o\">.</span><span class=\"n\">rule_vocabulary</span><span class=\"o\">.</span><span class=\"n\">RuleVocabulary</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "rostok.utils.result_saver.MCTSReporter", "modulename": "rostok.utils.result_saver", "qualname": "MCTSReporter", "kind": "class", "doc": "<p></p>\n"}, {"fullname": "rostok.utils.result_saver.MCTSReporter.__init__", "modulename": "rostok.utils.result_saver", "qualname": "MCTSReporter.__init__", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">path</span></span>)</span>"}, {"fullname": "rostok.utils.result_saver.MCTSReporter.add_reward", "modulename": "rostok.utils.result_saver", "qualname": "MCTSReporter.add_reward", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"bp\">self</span>,</span><span class=\"param\">\t<span class=\"n\">state</span><span class=\"p\">:</span> <span class=\"n\">rostok</span><span class=\"o\">.</span><span class=\"n\">utils</span><span class=\"o\">.</span><span class=\"n\">result_saver</span><span class=\"o\">.</span><span class=\"n\">RobotState</span>,</span><span class=\"param\">\t<span class=\"n\">reward</span><span class=\"p\">:</span> <span class=\"nb\">float</span>,</span><span class=\"param\">\t<span class=\"n\">control</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "rostok.utils.result_saver.MCTSReporter.make_step", "modulename": "rostok.utils.result_saver", "qualname": "MCTSReporter.make_step", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">rule</span>, </span><span class=\"param\"><span class=\"n\">step_number</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "rostok.utils.result_saver.MCTSReporter.plot_means", "modulename": "rostok.utils.result_saver", "qualname": "MCTSReporter.plot_means", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "rostok.utils.result_saver.MCTSReporter.dump_results", "modulename": "rostok.utils.result_saver", "qualname": "MCTSReporter.dump_results", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "rostok.utils.result_saver.read_report", "modulename": "rostok.utils.result_saver", "qualname": "read_report", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">path</span>, </span><span class=\"param\"><span class=\"n\">rules</span><span class=\"p\">:</span> <span class=\"n\">rostok</span><span class=\"o\">.</span><span class=\"n\">graph_grammar</span><span class=\"o\">.</span><span class=\"n\">rule_vocabulary</span><span class=\"o\">.</span><span class=\"n\">RuleVocabulary</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "rostok.utils.trajectory_generator", "modulename": "rostok.utils.trajectory_generator", "kind": "module", "doc": "<p></p>\n"}, {"fullname": "rostok.utils.trajectory_generator.create_const_traj", "modulename": "rostok.utils.trajectory_generator", "qualname": "create_const_traj", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">torque_value</span>, </span><span class=\"param\"><span class=\"n\">stop_time</span><span class=\"p\">:</span> <span class=\"nb\">float</span>, </span><span class=\"param\"><span class=\"n\">time_step</span><span class=\"p\">:</span> <span class=\"nb\">float</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "rostok.utils.trajectory_generator.create_dfs_joint", "modulename": "rostok.utils.trajectory_generator", "qualname": "create_dfs_joint", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"n\">graph</span><span class=\"p\">:</span> <span class=\"n\">rostok</span><span class=\"o\">.</span><span class=\"n\">graph_grammar</span><span class=\"o\">.</span><span class=\"n\">node</span><span class=\"o\">.</span><span class=\"n\">GraphGrammar</span></span><span class=\"return-annotation\">) -> <span class=\"nb\">list</span><span class=\"p\">[</span><span class=\"nb\">list</span><span class=\"p\">[</span><span class=\"n\">rostok</span><span class=\"o\">.</span><span class=\"n\">graph_grammar</span><span class=\"o\">.</span><span class=\"n\">node</span><span class=\"o\">.</span><span class=\"n\">Node</span><span class=\"p\">]]</span>:</span></span>", "funcdef": "def"}, {"fullname": "rostok.utils.trajectory_generator.create_torque_traj_from_x", "modulename": "rostok.utils.trajectory_generator", "qualname": "create_torque_traj_from_x", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"n\">graph</span><span class=\"p\">:</span> <span class=\"n\">rostok</span><span class=\"o\">.</span><span class=\"n\">graph_grammar</span><span class=\"o\">.</span><span class=\"n\">node</span><span class=\"o\">.</span><span class=\"n\">GraphGrammar</span>,</span><span class=\"param\">\t<span class=\"n\">x</span><span class=\"p\">:</span> <span class=\"nb\">list</span><span class=\"p\">[</span><span class=\"nb\">float</span><span class=\"p\">]</span>,</span><span class=\"param\">\t<span class=\"n\">stop_time</span><span class=\"p\">:</span> <span class=\"nb\">float</span>,</span><span class=\"param\">\t<span class=\"n\">time_step</span><span class=\"p\">:</span> <span class=\"nb\">float</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "rostok.virtual_experiment", "modulename": "rostok.virtual_experiment", "kind": "module", "doc": "<p></p>\n"}, {"fullname": "rostok.virtual_experiment.auxilarity_sensors", "modulename": "rostok.virtual_experiment.auxilarity_sensors", "kind": "module", "doc": "<p></p>\n"}, {"fullname": "rostok.virtual_experiment.auxilarity_sensors.RobotSensor", "modulename": "rostok.virtual_experiment.auxilarity_sensors", "qualname": "RobotSensor", "kind": "class", "doc": "<p>Sensor based on a robot (for chrono simulation)</p>\n\n<p>Returns:\n    optional: Values of the sensor</p>\n"}, {"fullname": "rostok.virtual_experiment.auxilarity_sensors.RobotSensor.__init__", "modulename": "rostok.virtual_experiment.auxilarity_sensors", "qualname": "RobotSensor.__init__", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">()</span>"}, {"fullname": "rostok.virtual_experiment.auxilarity_sensors.RobotSensor.mean_center", "modulename": "rostok.virtual_experiment.auxilarity_sensors", "qualname": "RobotSensor.mean_center", "kind": "function", "doc": "<p>Mean center of the robot. Line center of the robot's mass </p>\n\n<p>Args:\n    in_robot (Robot): Robot to measure</p>\n\n<p>Returns:\n    chrono.ChVectorD: Coordinate of the center of the robot</p>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"n\">in_robot</span><span class=\"p\">:</span> <span class=\"n\">rostok</span><span class=\"o\">.</span><span class=\"n\">virtual_experiment</span><span class=\"o\">.</span><span class=\"n\">robot</span><span class=\"o\">.</span><span class=\"n\">Robot</span></span><span class=\"return-annotation\">) -> <span class=\"n\">pychrono</span><span class=\"o\">.</span><span class=\"n\">core</span><span class=\"o\">.</span><span class=\"n\">ChVectorD</span>:</span></span>", "funcdef": "def"}, {"fullname": "rostok.virtual_experiment.auxilarity_sensors.RobotSensor.sum_contact_forces_blocks", "modulename": "rostok.virtual_experiment.auxilarity_sensors", "qualname": "RobotSensor.sum_contact_forces_blocks", "kind": "function", "doc": "<p>Sensor of sum contact forces blocks of robot</p>\n\n<p>Args:\n    in_robot (Robot): Robot to measure sum of contact forces</p>\n\n<p>Returns:\n    dict[int, float]: Dictionary which keys are id blocks of robot bodies and values are sum of contact forces</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">in_robot</span><span class=\"p\">:</span> <span class=\"n\">rostok</span><span class=\"o\">.</span><span class=\"n\">virtual_experiment</span><span class=\"o\">.</span><span class=\"n\">robot</span><span class=\"o\">.</span><span class=\"n\">Robot</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "rostok.virtual_experiment.auxilarity_sensors.RobotSensor.abs_coord_COG_blocks", "modulename": "rostok.virtual_experiment.auxilarity_sensors", "qualname": "RobotSensor.abs_coord_COG_blocks", "kind": "function", "doc": "<p>Sensor of absolute coordinates of the robot boides</p>\n\n<p>Args:\n    in_robot (Robot): Robot to measure</p>\n\n<p>Returns:\n    dict[int, chrono.ChVectorD]: Dictionary which keys are id blocks of robot boides and values are coordinates COG</p>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"n\">in_robot</span><span class=\"p\">:</span> <span class=\"n\">rostok</span><span class=\"o\">.</span><span class=\"n\">virtual_experiment</span><span class=\"o\">.</span><span class=\"n\">robot</span><span class=\"o\">.</span><span class=\"n\">Robot</span></span><span class=\"return-annotation\">) -> <span class=\"nb\">dict</span><span class=\"p\">[</span><span class=\"nb\">int</span><span class=\"p\">,</span> <span class=\"n\">pychrono</span><span class=\"o\">.</span><span class=\"n\">core</span><span class=\"o\">.</span><span class=\"n\">ChVectorD</span><span class=\"p\">]</span>:</span></span>", "funcdef": "def"}, {"fullname": "rostok.virtual_experiment.auxilarity_sensors.RobotSensor.amount_contact_surfaces_blocks", "modulename": "rostok.virtual_experiment.auxilarity_sensors", "qualname": "RobotSensor.amount_contact_surfaces_blocks", "kind": "function", "doc": "<p>Sensors of amount of contact surfaces robot bodies</p>\n\n<p>Args:\n    in_robot (Robot): Robot to measure</p>\n\n<p>Returns:\n    dict[int, int]: Dictionary which keys are id blocks of robot bodies and values are number of contact surfaces</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">in_robot</span><span class=\"p\">:</span> <span class=\"n\">rostok</span><span class=\"o\">.</span><span class=\"n\">virtual_experiment</span><span class=\"o\">.</span><span class=\"n\">robot</span><span class=\"o\">.</span><span class=\"n\">Robot</span></span><span class=\"return-annotation\">) -> <span class=\"nb\">dict</span><span class=\"p\">[</span><span class=\"nb\">int</span><span class=\"p\">,</span> <span class=\"nb\">int</span><span class=\"p\">]</span>:</span></span>", "funcdef": "def"}, {"fullname": "rostok.virtual_experiment.auxilarity_sensors.RobotSensor.joints_angle", "modulename": "rostok.virtual_experiment.auxilarity_sensors", "qualname": "RobotSensor.joints_angle", "kind": "function", "doc": "<p>Sensor angle joint of the robot</p>\n\n<p>Args:\n    in_robot (Robot): Robot to measure joint angles</p>\n\n<p>Returns:\n    dict[int, float]: Dictionary which keys are id blocks of robot joints and values are radians of angle joint</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">in_robot</span><span class=\"p\">:</span> <span class=\"n\">rostok</span><span class=\"o\">.</span><span class=\"n\">virtual_experiment</span><span class=\"o\">.</span><span class=\"n\">robot</span><span class=\"o\">.</span><span class=\"n\">Robot</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "rostok.virtual_experiment.auxilarity_sensors.RobotSensor.std_contact_forces_object", "modulename": "rostok.virtual_experiment.auxilarity_sensors", "qualname": "RobotSensor.std_contact_forces_object", "kind": "function", "doc": "<p>Sensor of sum contact forces blocks of robot</p>\n\n<p>Args:\n    in_robot (Robot): Robot to measure sum of contact forces</p>\n\n<p>Returns:\n    dict[int, float]: Dictionary which keys are id blocks of robot bodies and values are sum of contact forces</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">obj</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "rostok.virtual_experiment.robot", "modulename": "rostok.virtual_experiment.robot", "kind": "module", "doc": "<p></p>\n"}, {"fullname": "rostok.virtual_experiment.robot.RobotNode", "modulename": "rostok.virtual_experiment.robot", "qualname": "RobotNode", "kind": "class", "doc": "<p></p>\n"}, {"fullname": "rostok.virtual_experiment.robot.RobotNode.__init__", "modulename": "rostok.virtual_experiment.robot", "qualname": "RobotNode.__init__", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"nb\">id</span><span class=\"p\">:</span> <span class=\"nb\">int</span>,</span><span class=\"param\">\t<span class=\"n\">block</span><span class=\"p\">:</span> <span class=\"n\">rostok</span><span class=\"o\">.</span><span class=\"n\">block_builder</span><span class=\"o\">.</span><span class=\"n\">basic_node_block</span><span class=\"o\">.</span><span class=\"n\">Block</span>,</span><span class=\"param\">\t<span class=\"n\">node</span><span class=\"p\">:</span> <span class=\"n\">rostok</span><span class=\"o\">.</span><span class=\"n\">graph_grammar</span><span class=\"o\">.</span><span class=\"n\">node</span><span class=\"o\">.</span><span class=\"n\">Node</span></span>)</span>"}, {"fullname": "rostok.virtual_experiment.robot.Robot", "modulename": "rostok.virtual_experiment.robot", "qualname": "Robot", "kind": "class", "doc": "<p></p>\n"}, {"fullname": "rostok.virtual_experiment.robot.Robot.__init__", "modulename": "rostok.virtual_experiment.robot", "qualname": "Robot.__init__", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">robot_graph</span><span class=\"p\">:</span> <span class=\"n\">rostok</span><span class=\"o\">.</span><span class=\"n\">graph_grammar</span><span class=\"o\">.</span><span class=\"n\">node</span><span class=\"o\">.</span><span class=\"n\">GraphGrammar</span>, </span><span class=\"param\"><span class=\"n\">simulation</span></span>)</span>"}, {"fullname": "rostok.virtual_experiment.robot.Robot.get_joints", "modulename": "rostok.virtual_experiment.robot", "qualname": "Robot.get_joints", "kind": "variable", "doc": "<p>Create 2D-list joints from list of blocks. First index is the number\npartition graph, second index is the number of joint + create graph joint of robot</p>\n"}, {"fullname": "rostok.virtual_experiment.robot.Robot.get_block_graph", "modulename": "rostok.virtual_experiment.robot", "qualname": "Robot.get_block_graph", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "rostok.virtual_experiment.robot.Robot.get_dfs_partiton", "modulename": "rostok.virtual_experiment.robot", "qualname": "Robot.get_dfs_partiton", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">) -> <span class=\"nb\">list</span><span class=\"p\">[</span><span class=\"nb\">list</span><span class=\"p\">[</span><span class=\"n\">rostok</span><span class=\"o\">.</span><span class=\"n\">virtual_experiment</span><span class=\"o\">.</span><span class=\"n\">robot</span><span class=\"o\">.</span><span class=\"n\">RobotNode</span><span class=\"p\">]]</span>:</span></span>", "funcdef": "def"}, {"fullname": "rostok.virtual_experiment.simulation_step", "modulename": "rostok.virtual_experiment.simulation_step", "kind": "module", "doc": "<p></p>\n"}, {"fullname": "rostok.virtual_experiment.simulation_step.SimulationDataBlock", "modulename": "rostok.virtual_experiment.simulation_step", "qualname": "SimulationDataBlock", "kind": "class", "doc": "<p>Immutable class with output simulation data for robot block.</p>\n\n<p>Attr:\n    id_block (int): id of robot block\n    time (list[float]): list of time of simulation</p>\n"}, {"fullname": "rostok.virtual_experiment.simulation_step.SimulationDataBlock.__init__", "modulename": "rostok.virtual_experiment.simulation_step", "qualname": "SimulationDataBlock.__init__", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">id_block</span><span class=\"p\">:</span> <span class=\"nb\">int</span>, </span><span class=\"param\"><span class=\"n\">time</span><span class=\"p\">:</span> <span class=\"nb\">list</span><span class=\"p\">[</span><span class=\"nb\">float</span><span class=\"p\">]</span></span>)</span>"}, {"fullname": "rostok.virtual_experiment.simulation_step.DataJointBlock", "modulename": "rostok.virtual_experiment.simulation_step", "qualname": "DataJointBlock", "kind": "class", "doc": "<p>Immutable class with output simulation data for robot joint block.</p>\n\n<p>Attr:\n    id_block (int): id of robot block\n    time (list[float]): list of time of simulation\n    angle_list (list[float]): list of angle of robot joint block</p>\n", "bases": "SimulationDataBlock"}, {"fullname": "rostok.virtual_experiment.simulation_step.DataJointBlock.__init__", "modulename": "rostok.virtual_experiment.simulation_step", "qualname": "DataJointBlock.__init__", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">id_block</span><span class=\"p\">:</span> <span class=\"nb\">int</span>, </span><span class=\"param\"><span class=\"n\">time</span><span class=\"p\">:</span> <span class=\"nb\">list</span><span class=\"p\">[</span><span class=\"nb\">float</span><span class=\"p\">]</span>, </span><span class=\"param\"><span class=\"n\">angle_list</span><span class=\"p\">:</span> <span class=\"nb\">list</span><span class=\"p\">[</span><span class=\"nb\">float</span><span class=\"p\">]</span></span>)</span>"}, {"fullname": "rostok.virtual_experiment.simulation_step.DataBodyBlock", "modulename": "rostok.virtual_experiment.simulation_step", "qualname": "DataBodyBlock", "kind": "class", "doc": "<p>Immutable class with output simulation data for robot body block.</p>\n\n<p>Attr:\n    id_block (int): id of robot block\n    time (list[float]): list of time of simulation\n    sum_contact_forces (list[float]): list of contact forces sum\n    abs_coord_COG (list[float]): list of absolute coordinates of block\n    amount_contact_surfaces (list[int]): list of number of contact surfaces</p>\n", "bases": "SimulationDataBlock"}, {"fullname": "rostok.virtual_experiment.simulation_step.DataBodyBlock.__init__", "modulename": "rostok.virtual_experiment.simulation_step", "qualname": "DataBodyBlock.__init__", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"n\">id_block</span><span class=\"p\">:</span> <span class=\"nb\">int</span>,</span><span class=\"param\">\t<span class=\"n\">time</span><span class=\"p\">:</span> <span class=\"nb\">list</span><span class=\"p\">[</span><span class=\"nb\">float</span><span class=\"p\">]</span>,</span><span class=\"param\">\t<span class=\"n\">sum_contact_forces</span><span class=\"p\">:</span> <span class=\"nb\">list</span><span class=\"p\">[</span><span class=\"nb\">float</span><span class=\"p\">]</span>,</span><span class=\"param\">\t<span class=\"n\">abs_coord_COG</span><span class=\"p\">:</span> <span class=\"nb\">list</span><span class=\"p\">[</span><span class=\"nb\">list</span><span class=\"p\">[</span><span class=\"nb\">float</span><span class=\"p\">]]</span>,</span><span class=\"param\">\t<span class=\"n\">amount_contact_surfaces</span><span class=\"p\">:</span> <span class=\"nb\">list</span><span class=\"p\">[</span><span class=\"nb\">int</span><span class=\"p\">]</span></span>)</span>"}, {"fullname": "rostok.virtual_experiment.simulation_step.DataObjectBlock", "modulename": "rostok.virtual_experiment.simulation_step", "qualname": "DataObjectBlock", "kind": "class", "doc": "<p>Immutable class with output simulation data for object body.</p>\n\n<p>Attr:\n    id_block (int): id of object block. Object id is less zero\n    time (list[float]): time array of simulation\n    sum_contact_forces (list[float]): list of summary contact forces\n    abs_coord_COG (list[float]): list of absolute coordinates of block\n    amount_contact_surfaces (list[int]): list of number of contact surfaces</p>\n", "bases": "SimulationDataBlock"}, {"fullname": "rostok.virtual_experiment.simulation_step.DataObjectBlock.__init__", "modulename": "rostok.virtual_experiment.simulation_step", "qualname": "DataObjectBlock.__init__", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"n\">id_block</span><span class=\"p\">:</span> <span class=\"nb\">int</span>,</span><span class=\"param\">\t<span class=\"n\">time</span><span class=\"p\">:</span> <span class=\"nb\">list</span><span class=\"p\">[</span><span class=\"nb\">float</span><span class=\"p\">]</span>,</span><span class=\"param\">\t<span class=\"n\">obj_contact_forces</span><span class=\"p\">:</span> <span class=\"nb\">list</span><span class=\"p\">[</span><span class=\"nb\">float</span><span class=\"p\">]</span>,</span><span class=\"param\">\t<span class=\"n\">obj_amount_surf_forces</span><span class=\"p\">:</span> <span class=\"nb\">list</span><span class=\"p\">[</span><span class=\"nb\">float</span><span class=\"p\">]</span></span>)</span>"}, {"fullname": "rostok.virtual_experiment.simulation_step.SimulationStepOptimization", "modulename": "rostok.virtual_experiment.simulation_step", "qualname": "SimulationStepOptimization", "kind": "class", "doc": "<p>Wrapper class of simulation robot with control on <code>pychrono</code> physical engine.</p>\n\n<p>Before starting the simulation with the <code>simulate_system</code> method, recommended set stopping flag of simulation with <code>set_flags_stop_simulation</code>. \nOtherwise, the simulation time has no limits and lasts until the end of the program or until the visualization window is closed, if it is set.\nThere are flags in module <code>criterion.flags_simualtions</code></p>\n\n<p>Args:\n    control_trajectory: Array arries of control trajectory for each joints. Control trajectory of one joint have to have format [[time, value], ...]. Array must be same shape as array of joints.\n    graph_mechanism (GraphGrammar): Graph of the robot to be simulated\n    grasp_object (BlockWrapper): Wrapper of <code>ChronoBlockEnv</code>. This is the object that the robot grabs.</p>\n"}, {"fullname": "rostok.virtual_experiment.simulation_step.SimulationStepOptimization.__init__", "modulename": "rostok.virtual_experiment.simulation_step", "qualname": "SimulationStepOptimization.__init__", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"n\">control_trajectory</span>,</span><span class=\"param\">\t<span class=\"n\">graph_mechanism</span><span class=\"p\">:</span> <span class=\"n\">rostok</span><span class=\"o\">.</span><span class=\"n\">graph_grammar</span><span class=\"o\">.</span><span class=\"n\">node</span><span class=\"o\">.</span><span class=\"n\">GraphGrammar</span>,</span><span class=\"param\">\t<span class=\"n\">grasp_object</span><span class=\"p\">:</span> <span class=\"n\">rostok</span><span class=\"o\">.</span><span class=\"n\">graph_grammar</span><span class=\"o\">.</span><span class=\"n\">node</span><span class=\"o\">.</span><span class=\"n\">BlockWrapper</span></span>)</span>"}, {"fullname": "rostok.virtual_experiment.simulation_step.SimulationStepOptimization.fix_robot_base", "modulename": "rostok.virtual_experiment.simulation_step", "qualname": "SimulationStepOptimization.fix_robot_base", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "rostok.virtual_experiment.simulation_step.SimulationStepOptimization.bind_trajectory", "modulename": "rostok.virtual_experiment.simulation_step", "qualname": "SimulationStepOptimization.bind_trajectory", "kind": "function", "doc": "<p>Create the controller joint from the control trajectory</p>\n\n<p>Args:\n    control_trajectory (list): Array arries of control trajectory for each joints. Control trajectory of one joint have to have format [[time, value], ...]. Array must be same shape as array of joints.</p>\n\n<p>Raises:\n    IndexError: Exception in the case of a mismatch between the control and the joints</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">control_trajectory</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "rostok.virtual_experiment.simulation_step.SimulationStepOptimization.set_flags_stop_simulation", "modulename": "rostok.virtual_experiment.simulation_step", "qualname": "SimulationStepOptimization.set_flags_stop_simulation", "kind": "function", "doc": "<p>Setter flags of stop simulation</p>\n\n<p>Args:\n    flags_stop_simulation (list[FlagStopSimualtions]): List of desired checking flags. You can see flags in module <code>criterion.flags_simualtions</code>. Or create yours, that subclasses <code>FlagStopSimualtions</code></p>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"bp\">self</span>,</span><span class=\"param\">\t<span class=\"n\">flags_stop_simulation</span><span class=\"p\">:</span> <span class=\"nb\">list</span><span class=\"p\">[</span><span class=\"n\">rostok</span><span class=\"o\">.</span><span class=\"n\">criterion</span><span class=\"o\">.</span><span class=\"n\">flags_simualtions</span><span class=\"o\">.</span><span class=\"n\">FlagStopSimualtions</span><span class=\"p\">]</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "rostok.virtual_experiment.simulation_step.SimulationStepOptimization.change_config_system", "modulename": "rostok.virtual_experiment.simulation_step", "qualname": "SimulationStepOptimization.change_config_system", "kind": "function", "doc": "<p>The method is for changing parameters of <code>pychrono</code> simulation system.</p>\n\n<p>Args:\n    dict_config (dict): The dictionary which contains the configuration parameters simulation system. The format is {\"<name_of_method>\": <method_arguments>}. For example, {\"Set_G_acc\":chrono.ChVectorD(0,0,0)}</p>\n\n<p>Raises:\n    AttributeError: Exception in case the system does not have a specified method</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">dict_config</span><span class=\"p\">:</span> <span class=\"nb\">dict</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "rostok.virtual_experiment.simulation_step.SimulationStepOptimization.simulate_system", "modulename": "rostok.virtual_experiment.simulation_step", "qualname": "SimulationStepOptimization.simulate_system", "kind": "function", "doc": "<p>Start the simulation and return data from it</p>\n\n<p>Args:\n    time_step (float): Width of time step the simulation\n    visualize (bool, optional): Flag to enable visualization. Defaults to False.</p>\n\n<p>Returns:\n    SimOut(dict[int, SimulationDataBlock]): Dictionary of simulation data of each block. The keys are block id, and the values dataclasses with data.</p>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"bp\">self</span>,</span><span class=\"param\">\t<span class=\"n\">time_step</span>,</span><span class=\"param\">\t<span class=\"n\">visualize</span><span class=\"o\">=</span><span class=\"kc\">False</span></span><span class=\"return-annotation\">) -> <span class=\"nb\">dict</span><span class=\"p\">[</span><span class=\"nb\">int</span><span class=\"p\">,</span> <span class=\"n\">rostok</span><span class=\"o\">.</span><span class=\"n\">virtual_experiment</span><span class=\"o\">.</span><span class=\"n\">simulation_step</span><span class=\"o\">.</span><span class=\"n\">SimulationDataBlock</span><span class=\"p\">]</span>:</span></span>", "funcdef": "def"}];

    // mirrored in build-search-index.js (part 1)
    // Also split on html tags. this is a cheap heuristic, but good enough.
    elasticlunr.tokenizer.setSeperator(/[\s\-.;&_'"=,()]+|<[^>]*>/);

    let searchIndex;
    if (docs._isPrebuiltIndex) {
        console.info("using precompiled search index");
        searchIndex = elasticlunr.Index.load(docs);
    } else {
        console.time("building search index");
        // mirrored in build-search-index.js (part 2)
        searchIndex = elasticlunr(function () {
            this.pipeline.remove(elasticlunr.stemmer);
            this.pipeline.remove(elasticlunr.stopWordFilter);
            this.addField("qualname");
            this.addField("fullname");
            this.addField("annotation");
            this.addField("default_value");
            this.addField("signature");
            this.addField("bases");
            this.addField("doc");
            this.setRef("fullname");
        });
        for (let doc of docs) {
            searchIndex.addDoc(doc);
        }
        console.timeEnd("building search index");
    }

    return (term) => searchIndex.search(term, {
        fields: {
            qualname: {boost: 4},
            fullname: {boost: 2},
            annotation: {boost: 2},
            default_value: {boost: 2},
            signature: {boost: 2},
            bases: {boost: 2},
            doc: {boost: 1},
        },
        expand: true
    });
})();